---
interface Props {
  name?: string
  htmlCode?: string
  cssCode?: string
  jsCode?: string
  hideCode?: boolean
  theme?: string
  height?: string
  framework: 'vanilla' | 'react' | 'vue' | 'svelte'
  frameTemplate: 'orbit' | 'barebone'
}

import "prism-code-editor/themes/github-dark.css"
import "prism-code-editor/copy-button.css"
import "prism-code-editor/layout.css"
import "prism-code-editor/scrollbar.css"

import { Tabs, TabItem } from '@astrojs/starlight/components';
import orbitCode from '../assets/orbit.min.css?raw'
import orbitJS from '../assets/orbit.min.js?raw'


const { htmlCode = 'No HTML provided', cssCode, jsCode, name = 'zumer', hideCode = false, theme= '', height='300px', framework='vanilla', frameTemplate='orbit'} = Astro.props

let htmlClass = `html-${name}`
let cssClass = `css-${name}`
let jsClass = `js-${name}`
---

<div id={name} class="container not-content" style={{height: height}}>
  <div class="preview">
    <div class="codeRenderer">
      <!-- The iframe for rendering code will be inserted her e -->
    </div>
  </div>
</div>
<Tabs>
  {!hideCode && htmlCode && 
  <TabItem label="HTML" icon="seti:html" >
    <div class:list={[htmlClass, "zeditor", "not-content"]}></div>
  </TabItem>
  }
  {!hideCode && cssCode && 
    <TabItem label="CSS" icon="seti:css" >
    <div class:list={[cssClass, "zeditor", "not-content"]}></div>
  </TabItem>
  }
  {!hideCode && (framework !== 'vanilla' || jsCode) &&
    <TabItem label={framework !== 'vanilla' ? framework : 'Js'}  icon={`seti:${framework === 'vanilla' ? 'javascript' : framework}`} >
      <div class:list={[jsClass, "zeditor", "not-content"]}></div>
    </TabItem>
    }
  
</Tabs>
<script></script>
<script type="module" is:inline define:vars={
  {htmlCode, 
  cssCode, 
  jsCode,
  framework, 
  hideCode, 
  height,
  theme, 
  name, 
  orbitCode, 
  orbitJS, 
  htmlClass, 
  cssClass, 
  jsClass, 
  frameTemplate,
  
}
  }>

import { createEditor } from "/orbit-docs/prism-code-editor/dist/index.js"
import { copyButton } from "/orbit-docs/prism-code-editor/dist/extensions/copyButton/index.js"
import { matchBrackets } from "/orbit-docs/prism-code-editor/dist/extensions/matchBrackets/index.js"
import { indentGuides } from "/orbit-docs/prism-code-editor/dist/extensions/guides.js"
import { highlightBracketPairs } from "/orbit-docs/prism-code-editor/dist/extensions/matchBrackets/highlight.js"
import { matchTags } from "/orbit-docs/prism-code-editor/dist/extensions/matchTags.js"
import { defaultCommands } from "/orbit-docs/prism-code-editor/dist/extensions/commands.js"
import "/orbit-docs/prism-code-editor/dist/prism/languages/markup.js"
import "/orbit-docs/prism-code-editor/dist/prism/languages/css.js"
import "/orbit-docs/prism-code-editor/dist/prism/languages/javascript.js"


  let frame = frameworkSnippet (framework)
   
  let _HTML = frame && frame.html ? frame.html : htmlCode
  let _CSS = cssCode
  let _JS = frame && frame.app ? frame.app : jsCode

  !hideCode && htmlCode && createEditor(
    `.${htmlClass}`,
    {
      language: "html",
      value: `${_HTML.trim()}`,
      theme: "github-dark",
      onUpdate(editedHTML) {
        _HTML = editedHTML
        updateIframe()
      }
    },
    highlightBracketPairs(),
    matchTags(),
    defaultCommands(),
    matchBrackets(),
    indentGuides(),
    copyButton(),
  )
  
  !hideCode && cssCode &&
  createEditor(
    `.${cssClass}`,
    {
      language: "css",
      value: `${_CSS.trim()}`,
      theme: "github-dark",
      onUpdate(editedCSS) {
        _CSS = editedCSS
        updateIframe()
      }
    },
    highlightBracketPairs(),
    matchTags(),
    defaultCommands(),
    matchBrackets(),
    indentGuides(),
    copyButton(),
  )

  !hideCode && (framework !== 'vanilla' || jsCode) &&
  createEditor(
    `.${jsClass}`,
    {
      language: "javascript",
      wordWrap: true,
      value: `${_JS.trim()}`,
      theme: "github-dark",
      onUpdate(editedJS) {
        _JS = editedJS
        updateIframe()
      }
    },
    highlightBracketPairs(),
    matchTags(),
    defaultCommands(),
    matchBrackets(),
    indentGuides(),
    copyButton(),
  )
  
  function updateIframe() {
    renderCodeInIframe(_HTML, _CSS, _JS)
  }

  function frameworkSnippet (framework) {
    let url, html, app
    if (framework === 'vue') {
      url =  `<scr${'ipt'} crossorigin src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></scr${'ipt'}>`
      html = 
`<div id="app">
  ${htmlCode.trim()}
</div>`
      app = 
`const { createApp } = Vue

const app = createApp(${jsCode ? jsCode.trim() : '{}'}).mount('#app')

// Treat all tags starting with 'o-' as custom elements

app.config.compilerOptions.isCustomElement = (tag) => {
  return tag.startsWith('o-')
}
      
`
  }

  if (framework === 'react') {
      url =  `<scr${'ipt'} crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></scr${'ipt'}>
    <scr${'ipt'} crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></scr${'ipt'}>
    <scr${'ipt'} crossorigin src="https://unpkg.com/@babel/standalone/babel.min.js"></scr${'ipt'}>
   `
      html = 
`<div id="app"></div>`
      app = 
`${jsCode ? jsCode.trim() : 'function App() {return (<div>empty</div>)}'}

// Render the component to the DOM
const container = document.getElementById('app');
const root = ReactDOM.createRoot(container);
root.render(<App />);
      
`
  }
    return {url, app, html}
  }
  
  function renderCodeInIframe(_HTML, _CSS, _JS) { 
    const orbit = 
      `<html style=" margin: 0 !important; padding: 0 !important">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          ${frame && frame.url ? frame.url : ''}
          <style>
          ${orbitCode}
          body {
            font-family: "Noto Sans", sans-serif;
            font-optical-sizing: auto;
            font-weight: 500;
            font-style: normal;
            font-variation-settings: "wdth" 100;
            background-color: #fbfafa !important; 
            margin: 0 !important; 
            padding: 0 !important; 
            overflow: hidden
          }
          #app {
            height: ${height}
          }
          .bigbang {
            box-sizing: border-box;
          }
          ${_CSS}
          </style>
        </head>
        <body class="${theme}">
          ${_HTML}
          <scr${'ipt'}>
            ${orbitJS}
          </scr${'ipt'}>
          <scr${'ipt'} ${framework === 'react' ? 'type="text/babel"': ''}>
             ${_JS}
          </scr${'ipt'}>
        </body>
      </html>`
    const barebone = ` ${_HTML}`

    let iframeContent = frameTemplate === 'orbit' ? orbit : barebone

    const iframe = document.createElement('iframe')
    iframe.setAttribute('id', name)
    iframe.setAttribute('title', name)
    iframe.setAttribute('srcdoc', iframeContent)
    iframe.style.width = '100%'
    iframe.style.border = 'none'
    iframe.style.margin = '0'
    iframe.style.padding = '0'
    iframe.style.height = '100%' 
    const codeRenderer = document.querySelector(`#${name} .codeRenderer`)
    codeRenderer.innerHTML = ''
    codeRenderer.appendChild(iframe)
  }
    // Initially render the code of the active tabs
    updateIframe()
  </script>
<style>
  .container {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    padding: 5px;
    grid-template-areas: "preview";
    border: 1px solid #eaeaea;
    border-radius: 5px;
  }
  .preview {
    grid-area: preview;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    
    grid-template-areas: "codeRenderer";
  }
  .codeRenderer {
    grid-area: codeRenderer;
    
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .zeditor {
    max-height: 250px; overflow-y: auto;
    border-radius: 5px;
  }
</style>
 