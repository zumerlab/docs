{"version":3,"file":"templating-yZpuvMTN.js","sources":["../src/prism/utils/templating.js"],"sourcesContent":["import { tokenizeText, Token, resolve, withoutTokenizer } from \"../core.js\";\r\n\r\nvar embeddedIn = hostGrammar => (code, templateGrammar) => {\r\n\tvar host = resolve(hostGrammar);\r\n\tvar hostCode = '';\r\n\tvar tokenStack = [];\r\n\tvar stackLength = 0;\r\n\tvar templateTokens = withoutTokenizer(code, templateGrammar);\r\n\tvar i = 0, l = templateTokens.length, position = 0;\r\n\r\n\twhile (i < l) {\r\n\t\tvar token = templateTokens[i++];\r\n\t\tvar length = token.length;\r\n\t\tvar type = token.type;\r\n\t\tif (type && type.slice(0, 6) != 'ignore') {\r\n\t\t\ttokenStack[stackLength++] = [position, token];\r\n\t\t\thostCode += ' '.repeat(length);\r\n\t\t}\r\n\t\telse {\r\n\t\t\thostCode += code.slice(position, position + length);\r\n\t\t}\r\n\t\tposition += length;\r\n\t}\r\n\r\n\tvar j = 0;\r\n\tvar position = 0;\r\n\r\n\t/** @param {(string | Token)[]} tokens */\r\n\tvar walkTokens = tokens => {\r\n\t\tfor (var i = 0; j < stackLength && i < tokens.length; i++) {\r\n\t\t\tvar token = tokens[i];\r\n\t\t\tvar content = token.content;\r\n\t\t\t\r\n\t\t\tif (Array.isArray(content)) {\r\n\t\t\t\twalkTokens(content);\r\n\t\t\t} else {\r\n\t\t\t\tvar length = token.length;\r\n\t\t\t\tvar replacement = [];\r\n\t\t\t\tvar offset, t, k = 0;\r\n\t\t\t\tvar pos = position;\r\n\r\n\t\t\t\twhile ([offset, t] = tokenStack[j], offset >= position && offset < position + length) {\r\n\t\t\t\t\tif (pos < offset) replacement[k++] = hostCode.slice(pos, offset);\r\n\t\t\t\t\tpos = offset + t.length;\r\n\t\t\t\t\treplacement[k++] = t;\r\n\t\t\t\t\tif (++j == stackLength) break;\r\n\t\t\t\t}\r\n\t\t\t\tposition += length;\r\n\t\t\t\t\r\n\t\t\t\tif (k) {\r\n\t\t\t\t\tif (pos < position) replacement[k++] = hostCode.slice(pos, position);\r\n\t\t\t\t\tif (content) {\r\n\t\t\t\t\t\ttoken.content = replacement;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttokens.splice(i, 1, ...replacement);\r\n\t\t\t\t\t\ti += k - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvar tokens = host ? tokenizeText(hostCode, host) : [hostCode];\r\n\twalkTokens(tokens);\r\n\r\n\treturn tokens;\r\n}\r\n\r\nexport { embeddedIn }\r\n"],"names":["tokens","i","token","length"],"mappings":";AAEG,IAAC,aAAa,iBAAe,CAAC,MAAM,oBAAoB;AAC1D,MAAI,OAAO,QAAQ,WAAW;AAC9B,MAAI,WAAW;AACf,MAAI,aAAa,CAAA;AACjB,MAAI,cAAc;AAClB,MAAI,iBAAiB,iBAAiB,MAAM,eAAe;AAC3D,MAAI,IAAI,GAAG,IAAI,eAAe,QAAQ,WAAW;AAEjD,SAAO,IAAI,GAAG;AACb,QAAI,QAAQ,eAAe,GAAG;AAC9B,QAAI,SAAS,MAAM;AACnB,QAAI,OAAO,MAAM;AACjB,QAAI,QAAQ,KAAK,MAAM,GAAG,CAAC,KAAK,UAAU;AACzC,iBAAW,aAAa,IAAI,CAAC,UAAU,KAAK;AAC5C,kBAAY,IAAI,OAAO,MAAM;AAAA,IAC7B,OACI;AACJ,kBAAY,KAAK,MAAM,UAAU,WAAW,MAAM;AAAA,IAClD;AACD,gBAAY;AAAA,EACZ;AAED,MAAI,IAAI;AACR,MAAI,WAAW;AAGf,MAAI,aAAa,CAAAA,YAAU;AAC1B,aAASC,KAAI,GAAG,IAAI,eAAeA,KAAID,QAAO,QAAQC,MAAK;AAC1D,UAAIC,SAAQF,QAAOC,EAAC;AACpB,UAAI,UAAUC,OAAM;AAEpB,UAAI,MAAM,QAAQ,OAAO,GAAG;AAC3B,mBAAW,OAAO;AAAA,MACtB,OAAU;AACN,YAAIC,UAASD,OAAM;AACnB,YAAI,cAAc,CAAA;AAClB,YAAI,QAAQ,GAAG,IAAI;AACnB,YAAI,MAAM;AAEV,eAAO,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,GAAG,UAAU,YAAY,SAAS,WAAWC,SAAQ;AACrF,cAAI,MAAM;AAAQ,wBAAY,GAAG,IAAI,SAAS,MAAM,KAAK,MAAM;AAC/D,gBAAM,SAAS,EAAE;AACjB,sBAAY,GAAG,IAAI;AACnB,cAAI,EAAE,KAAK;AAAa;AAAA,QACxB;AACD,oBAAYA;AAEZ,YAAI,GAAG;AACN,cAAI,MAAM;AAAU,wBAAY,GAAG,IAAI,SAAS,MAAM,KAAK,QAAQ;AACnE,cAAI,SAAS;AACZ,YAAAD,OAAM,UAAU;AAAA,UACtB,OAAY;AACN,YAAAF,QAAO,OAAOC,IAAG,GAAG,GAAG,WAAW;AAClC,YAAAA,MAAK,IAAI;AAAA,UACT;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAED,MAAI,SAAS,OAAO,aAAa,UAAU,IAAI,IAAI,CAAC,QAAQ;AAC5D,aAAW,MAAM;AAEjB,SAAO;AACR;"}