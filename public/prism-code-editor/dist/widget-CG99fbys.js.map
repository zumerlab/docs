{"version":3,"file":"widget-CG99fbys.js","sources":["../src/extensions/search/widget.ts"],"sourcesContent":["import { InputSelection, BasicExtension, isWebKit } from \"../../index.js\"\r\nimport {\r\n\tisChrome,\r\n\tisMac,\r\n\tcreateTemplate,\r\n\tpreventDefault,\r\n\taddTextareaListener,\r\n\tnumLines,\r\n} from \"../../core.js\"\r\nimport { regexEscape, getModifierCode } from \"../../utils/index.js\"\r\nimport { createReplaceAPI } from \"./replace.js\"\r\nimport { addListener, getLineEnd, getLineStart, getStyleValue } from \"../../utils/local.js\"\r\n\r\nconst shortcut = ` (Alt+${isMac ? \"Cmd+\" : \"\"}`\r\n\r\nconst template = createTemplate(\r\n\t`<div class=prism-search-container style=display:flex;align-items:flex-start;justify-content:flex-end><div dir=ltr class=prism-search><button type=button aria-expanded=false title=\"Toggle Replace\" class=pce-expand></button><div spellcheck=false><div><div class=\"pce-input pce-find\"><input autocorrect=off autocapitalize=off placeholder=Find aria-label=Find><button type=button class=prev-match title=\"Previous Match (Shift+Enter)\"></button><button type=button class=next-match title=\"Next Match (Enter)\"></button><div class=search-error></div></div><button type=button class=pce-close title=\"Close (Esc)\"></button></div><div class=\"pce-input pce-replace\"><input autocorrect=off autocapitalize=off placeholder=Replace aria-label=Replace><button type=button title=(Enter)>Replace</button><button type=button title=(${\r\n\t\tisMac ? \"Cmd\" : \"Ctrl+Alt\"\r\n\t}+Enter)>All</button></div><div class=pce-options><div class=pce-match-count>0<span> of </span>0</div><button type=button aria-pressed=false class=pce-regex title=\"RegExp Search${shortcut}R)\"><span aria-hidden=true></span></button><button type=button aria-pressed=false title=\"Preserve Case${shortcut}P)\"><span aria-hidden=true>Aa</span></button><button type=button aria-pressed=false class=pce-whole title=\"Match Whole Word${shortcut}W)\"><span aria-hidden=true>ab</span></button><button type=button aria-pressed=false class=pce-in-selection title=\"Find in Selection${shortcut}L)\">`,\r\n)\r\n\r\nconst toggleAttr = (el: Element, name: string) =>\r\n\tel.setAttribute(name, <any>(el.getAttribute(name) == \"false\"))\r\n\r\nexport interface SearchWidget extends BasicExtension {\r\n\t/** The search widget's outer element. */\r\n\treadonly element: HTMLDivElement\r\n\t/**\r\n\t * Hides the search widget and removes most event listeners.\r\n\t * @param focusTextarea Whether the editor's `textarea` should gain focus. Defaults to true.\r\n\t */\r\n\tclose: (focusTextarea?: boolean) => void\r\n\t/**\r\n\t * Opens the search widget.\r\n\t * @param focusInput Whether the widgets's search input should gain focus. Defaults to true.\r\n\t */\r\n\topen: (focusInput?: boolean) => void\r\n}\r\n\r\n/**\r\n * Extension that adds a widget for search and replace functionality.\r\n * This extension needs styles from `prism-code-editor/search.css`.\r\n */\r\nexport const searchWidget = (): SearchWidget => {\r\n\tlet prevLength: number\r\n\tlet useRegExp: boolean\r\n\tlet matchCase: boolean\r\n\tlet wholeWord: boolean\r\n\tlet searchSelection: [number, number] | undefined\r\n\tlet isOpen: boolean\r\n\tlet currentSelection: InputSelection\r\n\tlet prevUserSelection: InputSelection\r\n\tlet prevMargin: number\r\n\tlet selectNext = false\r\n\tlet marginTop: number\r\n\r\n\tconst self: SearchWidget = editor => {\r\n\t\teditor.extensions.searchWidget = self\r\n\r\n\t\tconst { textarea, wrapper, overlays, scrollContainer, getSelection } = editor\r\n\t\tconst replaceAPI = createReplaceAPI(editor)\r\n\r\n\t\tconst startSearch = (selectMatch?: boolean) => {\r\n\t\t\tif (selectMatch && !isWebKit) textarea.setSelectionRange(...prevUserSelection)\r\n\t\t\tconst error = replaceAPI.search(\r\n\t\t\t\tfindInput.value,\r\n\t\t\t\tmatchCase,\r\n\t\t\t\twholeWord,\r\n\t\t\t\tuseRegExp,\r\n\t\t\t\tsearchSelection,\r\n\t\t\t)\r\n\t\t\tconst index = error ? -1 : selectNext ? replaceAPI.next() : replaceAPI.closest()\r\n\r\n\t\t\tcurrent.data = <any>index + 1\r\n\t\t\ttotal.data = <any>replaceAPI.matches.length\r\n\t\t\tfindContainer.classList.toggle(\"pce-error\", !!error)\r\n\r\n\t\t\tif (error) errorEl.textContent = error\r\n\t\t\telse if (selectMatch || selectNext) replaceAPI.selectMatch(index, prevMargin)\r\n\t\t}\r\n\r\n\t\tconst keydown = (e: KeyboardEvent) => {\r\n\t\t\t// F or G + Ctrl/Cmd\r\n\t\t\tif (e.keyCode >> 1 == 35 && getModifierCode(e) == (isMac ? 0b0100 : 0b0010)) {\r\n\t\t\t\tpreventDefault(e)\r\n\t\t\t\topen()\r\n\t\t\t\tlet [start, end] = getSelection(),\r\n\t\t\t\t\tvalue = editor.value,\r\n\t\t\t\t\tword =\r\n\t\t\t\t\t\tvalue.slice(start, end) ||\r\n\t\t\t\t\t\tvalue.slice(0, start).match(/[_\\p{N}\\p{L}]*$/u)![0] +\r\n\t\t\t\t\t\t\tvalue.slice(start).match(/^[_\\p{N}\\p{L}]*/u)![0]\r\n\t\t\t\tif (/^$|\\n/.test(word)) startSearch()\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (useRegExp) word = regexEscape(word)\r\n\t\t\t\t\tdocument.execCommand(\"insertText\", false, word)\r\n\t\t\t\t\tfindInput.select()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst open = (focusInput = true) => {\r\n\t\t\tif (!isOpen) {\r\n\t\t\t\tisOpen = true\r\n\t\t\t\tif (marginTop == null) prevMargin = marginTop = getStyleValue(wrapper, \"marginTop\")\r\n\t\t\t\tprevUserSelection = getSelection()\r\n\t\t\t\toverlays.append(container)\r\n\t\t\t\tupdateMargin()\r\n\t\t\t\tresize()\r\n\t\t\t\tobserver?.observe(scrollContainer)\r\n\t\t\t}\r\n\t\t\tif (focusInput) findInput.select()\r\n\t\t}\r\n\r\n\t\tconst close = (self.close = (focusTextarea = true) => {\r\n\t\t\tif (isOpen) {\r\n\t\t\t\tisOpen = false\r\n\t\t\t\treplaceAPI.stopSearch()\r\n\t\t\t\tcontainer.remove()\r\n\t\t\t\tupdateMargin()\r\n\t\t\t\tobserver?.disconnect()\r\n\t\t\t\tfocusTextarea && textarea.focus()\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tconst move = (next?: boolean) => {\r\n\t\t\tif (replaceAPI.matches[0]) {\r\n\t\t\t\tconst index = replaceAPI[next ? \"next\" : \"prev\"]()\r\n\t\t\t\treplaceAPI.selectMatch(index, prevMargin)\r\n\t\t\t\tcurrent.data = <any>index + 1\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst updateMargin = () => {\r\n\t\t\tconst newMargin = isOpen\r\n\t\t\t\t? getStyleValue(search, \"top\") + getStyleValue(search, \"height\")\r\n\t\t\t\t: marginTop\r\n\t\t\tconst newScroll = scrollContainer.scrollTop + newMargin - prevMargin\r\n\r\n\t\t\twrapper.style.marginTop = isOpen ? newMargin + \"px\" : \"\"\r\n\t\t\tscrollContainer.scrollTop = newScroll\r\n\t\t\tprevMargin = newMargin\r\n\t\t}\r\n\r\n\t\tconst resize = () =>\r\n\t\t\tdiv.style.setProperty(\r\n\t\t\t\t\"--search-width\",\r\n\t\t\t\t`min(${scrollContainer.clientWidth - 2}px - 2.4em - var(--padding-left),20em)`,\r\n\t\t\t)\r\n\r\n\t\tconst observer = window.ResizeObserver && new ResizeObserver(resize)\r\n\r\n\t\tconst replace = () => {\r\n\t\t\tselectNext = true\r\n\t\t\tconst index = replaceAPI.replace(replaceInput.value)\r\n\t\t\tif (index != null) {\r\n\t\t\t\tcurrent.data = <any>(index + 1)\r\n\t\t\t\treplaceAPI.selectMatch(index, prevMargin)\r\n\t\t\t}\r\n\t\t\tselectNext = false\r\n\t\t}\r\n\r\n\t\tconst replaceAll = () => {\r\n\t\t\treplaceAPI.replaceAll(replaceInput.value)\r\n\t\t}\r\n\r\n\t\tconst keyCodeButtonMap: Record<string, HTMLButtonElement> = {\r\n\t\t\t80 /* P */: matchCaseEl,\r\n\t\t\t87 /* W */: wholeWordEl,\r\n\t\t\t82 /* R */: useRegExpEl,\r\n\t\t\t76 /* L */: inSelectionEl,\r\n\t\t}\r\n\r\n\t\tconst elementHandlerMap = new Map<HTMLElement, () => any>([\r\n\t\t\t[nextEl, () => move(true)],\r\n\t\t\t[prevEl, move],\r\n\t\t\t[closeEl, close],\r\n\t\t\t[replaceEl, replace],\r\n\t\t\t[replaceAllEl, replaceAll],\r\n\t\t\t[\r\n\t\t\t\ttoggle,\r\n\t\t\t\t() => {\r\n\t\t\t\t\ttoggleAttr(toggle, \"aria-expanded\")\r\n\t\t\t\t\tupdateMargin()\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\t[matchCaseEl, () => (matchCase = !matchCase)],\r\n\t\t\t[useRegExpEl, () => (useRegExp = !useRegExp)],\r\n\t\t\t[wholeWordEl, () => (wholeWord = !wholeWord)],\r\n\t\t\t[\r\n\t\t\t\tinSelectionEl,\r\n\t\t\t\t() => {\r\n\t\t\t\t\tconst value = editor.value\r\n\t\t\t\t\tif (searchSelection) searchSelection = undefined\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tsearchSelection = <[number, number]>getSelection().slice(0, 2)\r\n\r\n\t\t\t\t\t\tif (numLines(value, ...searchSelection) > 1) {\r\n\t\t\t\t\t\t\tsearchSelection = [\r\n\t\t\t\t\t\t\t\tgetLineStart(value, searchSelection[0]),\r\n\t\t\t\t\t\t\t\tgetLineEnd(value, searchSelection[1]),\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tprevLength = value.length\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t])\r\n\r\n\t\taddTextareaListener(editor, \"keydown\", keydown)\r\n\t\taddTextareaListener(editor, \"beforeinput\", () => {\r\n\t\t\tif (isOpen && searchSelection) currentSelection = getSelection()\r\n\t\t})\r\n\t\taddListener(editor, \"update\", () => {\r\n\t\t\tif (!isOpen) return\r\n\t\t\tif (searchSelection && currentSelection) {\r\n\t\t\t\t// This preserves the selection well for normal typing,\r\n\t\t\t\t// but for indenting, toggling comments, etc. it doesn't\r\n\t\t\t\tconst diff = prevLength - (prevLength = editor.value.length)\r\n\t\t\t\tconst end = currentSelection[1]\r\n\r\n\t\t\t\tif (end <= searchSelection[1]) {\r\n\t\t\t\t\tsearchSelection[1] -= diff\r\n\t\t\t\t\tif (end <= searchSelection[0] - +(diff < 0)) searchSelection[0] -= diff\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstartSearch()\r\n\t\t})\r\n\t\taddListener(editor, \"selectionChange\", selection => {\r\n\t\t\tif (isOpen && editor.focused) prevUserSelection = selection\r\n\t\t})\r\n\r\n\t\t// Patches a bug where Chrome lies about the textarea's selection\r\n\t\tif (isChrome) {\r\n\t\t\tcontainer.addEventListener(\"focusin\", e => {\r\n\t\t\t\tif (!container.contains(<Element>e.relatedTarget)) {\r\n\t\t\t\t\tfindInput.focus()\r\n\t\t\t\t\t;(<HTMLElement>e.target).focus()\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\tcontainer.addEventListener(\"click\", e => {\r\n\t\t\tconst target = <HTMLElement>e.target\r\n\t\t\tconst remove = addListener(editor, \"update\", () => target.focus())\r\n\t\t\telementHandlerMap.get(target)?.()\r\n\t\t\tif (target.matches(\".pce-options>button\")) {\r\n\t\t\t\ttoggleAttr(target, \"aria-pressed\")\r\n\t\t\t\tstartSearch(true)\r\n\t\t\t}\r\n\t\t\tremove()\r\n\t\t})\r\n\r\n\t\tfindInput.oninput = () => isOpen && startSearch(true)\r\n\r\n\t\tcontainer.addEventListener(\"keydown\", e => {\r\n\t\t\tconst shortcut = getModifierCode(e)\r\n\t\t\tconst target = <HTMLElement>e.target\r\n\t\t\tconst keyCode = e.keyCode\r\n\t\t\tconst isFind = target == findInput\r\n\t\t\tif (shortcut == (isMac ? 5 : 1)) {\r\n\t\t\t\tif (keyCodeButtonMap[keyCode]) {\r\n\t\t\t\t\tpreventDefault(e)\r\n\t\t\t\t\tkeyCodeButtonMap[keyCode].click()\r\n\t\t\t\t}\r\n\t\t\t} else if (keyCode == 13 && target.tagName == \"INPUT\") {\r\n\t\t\t\tpreventDefault(e)\r\n\t\t\t\tif (!shortcut) isFind ? move(true) : replaceEl.click()\r\n\t\t\t\telse if (shortcut == 8 && isFind) move()\r\n\t\t\t\telse if (shortcut == (isMac ? 4 : 3) && !isFind) replaceAllEl.click()\r\n\t\t\t\ttarget.focus()\r\n\t\t\t} else if (!shortcut && keyCode == 27) close()\r\n\t\t\telse keydown(e)\r\n\t\t})\r\n\r\n\t\tself.open = focusInput => {\r\n\t\t\topen(focusInput)\r\n\t\t\tstartSearch()\r\n\t\t}\r\n\r\n\t\treplaceAPI.container.className = \"pce-matches\"\r\n\t}\r\n\r\n\tconst container = <HTMLDivElement>template()\r\n\t// @ts-expect-error\r\n\tconst search = (self.element = <HTMLDivElement>container.firstChild)\r\n\tconst [toggle, div] = <[HTMLButtonElement, HTMLDivElement]>(<unknown>search.children)\r\n\tconst rows = div.children\r\n\tconst [findContainer, closeEl] = <[HTMLDivElement, HTMLButtonElement]>(<unknown>rows[0].children)\r\n\tconst [findInput, prevEl, nextEl, errorEl] = <\r\n\t\t[HTMLInputElement, HTMLButtonElement, HTMLButtonElement, HTMLDivElement]\r\n\t>(<unknown>findContainer.children)\r\n\tconst [replaceInput, replaceEl, replaceAllEl] = <\r\n\t\t[HTMLInputElement, HTMLButtonElement, HTMLButtonElement]\r\n\t>(<unknown>rows[1].children)\r\n\tconst [matchCount, useRegExpEl, matchCaseEl, wholeWordEl, inSelectionEl] = <\r\n\t\t[HTMLDivElement, HTMLButtonElement, HTMLButtonElement, HTMLButtonElement, HTMLButtonElement]\r\n\t>(<unknown>rows[2].children)\r\n\tconst [current, , total] = <Text[]>(<unknown>matchCount.childNodes)\r\n\r\n\tself.open = self.close = () => {}\r\n\r\n\treturn self\r\n}\r\n"],"names":["shortcut"],"mappings":"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"}