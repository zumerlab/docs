{"version":3,"file":"utils-BwjmoXco.js","sources":["../src/extensions/autocomplete/utils.ts"],"sourcesContent":["import { PrismEditor } from \"../../index.js\"\r\nimport { Token } from \"../../prism/core.js\"\r\nimport { TokenStream } from \"../../prism/types.js\"\r\nimport { matchTemplate } from \"../search/search.js\"\r\nimport { Completion, CompletionContext, CompletionSource } from \"./types.js\"\r\n\r\nconst optionsFromKeys = (obj: object, icon?: string): Completion[] =>\r\n\tObject.keys(obj).map(tag => ({ label: tag, icon }))\r\n\r\nconst updateNode = (node: Text, text: string) => {\r\n\tif (node.data != text) node.data = text\r\n}\r\n\r\nconst updateMatched = (container: HTMLElement, matched: number[], text: string) => {\r\n\tlet nodes = container.childNodes\r\n\tlet nodeCount = nodes.length - 1\r\n\tlet pos = 0\r\n\tlet i = 0\r\n\tlet l = matched.length\r\n\r\n\tfor (; i < l; ) {\r\n\t\tif (i >= nodeCount) {\r\n\t\t\tnodes[i].before(\"\", matchTemplate())\r\n\t\t}\r\n\t\tupdateNode(nodes[i] as Text, text.slice(pos, (pos = matched[i++])))\r\n\t\tupdateNode(nodes[i].firstChild as Text, text.slice(pos, (pos = matched[i++])))\r\n\t}\r\n\tfor (; nodeCount > i; ) {\r\n\t\tnodes[--nodeCount].remove()\r\n\t}\r\n\tupdateNode(nodes[l] as Text, text.slice(pos))\r\n}\r\n\r\n/**\r\n * Completion source that returns a list of snippets if `path` property of the context\r\n * is present and only contains a single string.\r\n * @param snippets Snippets to complete.\r\n */\r\nconst completeSnippets = (snippets: Completion[]): CompletionSource<{ path: string[] | null }> => {\r\n\treturn ({ path, explicit, pos }) => {\r\n\t\tif (path?.length == 1 && (path[0] || explicit)) {\r\n\t\t\treturn {\r\n\t\t\t\tfrom: pos - path[0].length,\r\n\t\t\t\toptions: snippets,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Utility that searches the editor's {@link TokenStream} for strings.\r\n * @param context Current completion context.\r\n * @param editor Editor to search in.\r\n * @param filter Function used to filter tokens you want to search in. Is called with the\r\n * type of the token and its starting position. If the filter returns true, the token\r\n * will be searched.\r\n * @param pattern Pattern used to search for words.\r\n * @param init Words to initialize the result with.\r\n * @param tokensOnly If `true` only the text of tokens whoose `content` is a string will\r\n * be searched. If not any string inside the {@link TokenStream} can be searched.\r\n * @returns An array with found identifers/words.\r\n */\r\nconst findWords = (\r\n\tcontext: CompletionContext,\r\n\teditor: PrismEditor,\r\n\tfilter: (type: string, start: number) => boolean,\r\n\tpattern: RegExp,\r\n\tinit?: Iterable<string>,\r\n\ttokensOnly?: boolean,\r\n) => {\r\n\tconst cursorPos = context.pos\r\n\tconst language = context.language\r\n\tconst result = new Set(init)\r\n\tconst search = (tokens: TokenStream, pos: number, isCorrectLang: boolean) => {\r\n\t\tlet i = 0\r\n\t\tlet token: string | Token\r\n\t\tif (isCorrectLang) {\r\n\t\t\tfor (; (token = tokens[i++]); ) {\r\n\t\t\t\tif (typeof token == \"string\") {\r\n\t\t\t\t\tif (!tokensOnly) match(token, pos)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst type = token.type\r\n\t\t\t\t\tconst content = token.content\r\n\t\t\t\t\tif ((token.alias || type).slice(0, 9) != \"language-\" && filter(type, pos)) {\r\n\t\t\t\t\t\tif (Array.isArray(content)) {\r\n\t\t\t\t\t\t\tsearch(content, pos, true)\r\n\t\t\t\t\t\t} else match(content, pos)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tpos += token.length\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (; (token = tokens[i++]); ) {\r\n\t\t\t\tif (typeof token != \"string\") {\r\n\t\t\t\t\tconst type = token.type\r\n\t\t\t\t\tconst content = token.content\r\n\t\t\t\t\tif (Array.isArray(content)) {\r\n\t\t\t\t\t\tconst aliasType = token.alias || type\r\n\t\t\t\t\t\tsearch(\r\n\t\t\t\t\t\t\tcontent,\r\n\t\t\t\t\t\t\tpos,\r\n\t\t\t\t\t\t\taliasType.slice(0, 9) == \"language-\" ? aliasType.slice(9) == language : false,\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tpos += token.length\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconst match = (token: string, pos: number) => {\r\n\t\tlet match: RegExpExecArray | null\r\n\t\twhile ((match = pattern.exec(token))) {\r\n\t\t\tlet start = pos + match.index\r\n\t\t\tlet str = match[0]\r\n\t\t\tif (start > cursorPos || start + str.length < cursorPos) result.add(str)\r\n\t\t}\r\n\t}\r\n\r\n\tsearch(editor.tokens, 0, language == editor.options.language)\r\n\r\n\treturn [...result]\r\n}\r\n\r\nexport { optionsFromKeys, updateMatched, updateNode, findWords, completeSnippets }\r\n"],"names":["match"],"mappings":";AAMA,MAAM,kBAAkB,CAAC,KAAa,SACrC,OAAO,KAAK,GAAG,EAAE,IAAI,CAAQ,SAAA,EAAE,OAAO,KAAK,KAAO,EAAA;AAE7C,MAAA,aAAa,CAAC,MAAY,SAAiB;AAChD,MAAI,KAAK,QAAQ;AAAM,SAAK,OAAO;AACpC;AAEA,MAAM,gBAAgB,CAAC,WAAwB,SAAmB,SAAiB;AAClF,MAAI,QAAQ,UAAU;AAClB,MAAA,YAAY,MAAM,SAAS;AAC/B,MAAI,MAAM;AACV,MAAI,IAAI;AACR,MAAI,IAAI,QAAQ;AAEhB,SAAO,IAAI,KAAK;AACf,QAAI,KAAK,WAAW;AACnB,YAAM,CAAC,EAAE,OAAO,IAAI,cAAe,CAAA;AAAA,IACpC;AACW,eAAA,MAAM,CAAC,GAAW,KAAK,MAAM,KAAM,MAAM,QAAQ,GAAG,CAAE,CAAC;AACvD,eAAA,MAAM,CAAC,EAAE,YAAoB,KAAK,MAAM,KAAM,MAAM,QAAQ,GAAG,CAAE,CAAC;AAAA,EAC9E;AACA,SAAO,YAAY,KAAK;AACjB,UAAA,EAAE,SAAS,EAAE;EACpB;AACA,aAAW,MAAM,CAAC,GAAW,KAAK,MAAM,GAAG,CAAC;AAC7C;AAOM,MAAA,mBAAmB,CAAC,aAAwE;AACjG,SAAO,CAAC,EAAE,MAAM,UAAU,UAAU;AACnC,QAAI,MAAM,UAAU,MAAM,KAAK,CAAC,KAAK,WAAW;AACxC,aAAA;AAAA,QACN,MAAM,MAAM,KAAK,CAAC,EAAE;AAAA,QACpB,SAAS;AAAA,MAAA;AAAA,IAEX;AAAA,EAAA;AAEF;AAeA,MAAM,YAAY,CACjB,SACA,QACA,QACA,SACA,MACA,eACI;AACJ,QAAM,YAAY,QAAQ;AAC1B,QAAM,WAAW,QAAQ;AACnB,QAAA,SAAS,IAAI,IAAI,IAAI;AAC3B,QAAM,SAAS,CAAC,QAAqB,KAAa,kBAA2B;AAC5E,QAAI,IAAI;AACJ,QAAA;AACJ,QAAI,eAAe;AACV,aAAA,QAAQ,OAAO,GAAG,KAAM;AAC3B,YAAA,OAAO,SAAS,UAAU;AAC7B,cAAI,CAAC;AAAY,kBAAM,OAAO,GAAG;AAAA,QAAA,OAC3B;AACN,gBAAM,OAAO,MAAM;AACnB,gBAAM,UAAU,MAAM;AACjB,eAAA,MAAM,SAAS,MAAM,MAAM,GAAG,CAAC,KAAK,eAAe,OAAO,MAAM,GAAG,GAAG;AACtE,gBAAA,MAAM,QAAQ,OAAO,GAAG;AACpB,qBAAA,SAAS,KAAK,IAAI;AAAA,YAC1B;AAAO,oBAAM,SAAS,GAAG;AAAA,UAC1B;AAAA,QACD;AACA,eAAO,MAAM;AAAA,MACd;AAAA,IAAA,OACM;AACE,aAAA,QAAQ,OAAO,GAAG,KAAM;AAC3B,YAAA,OAAO,SAAS,UAAU;AAC7B,gBAAM,OAAO,MAAM;AACnB,gBAAM,UAAU,MAAM;AAClB,cAAA,MAAM,QAAQ,OAAO,GAAG;AACrB,kBAAA,YAAY,MAAM,SAAS;AACjC;AAAA,cACC;AAAA,cACA;AAAA,cACA,UAAU,MAAM,GAAG,CAAC,KAAK,cAAc,UAAU,MAAM,CAAC,KAAK,WAAW;AAAA,YAAA;AAAA,UAE1E;AAAA,QACD;AACA,eAAO,MAAM;AAAA,MACd;AAAA,IACD;AAAA,EAAA;AAEK,QAAA,QAAQ,CAAC,OAAe,QAAgB;AACzCA,QAAAA;AACJ,WAAQA,SAAQ,QAAQ,KAAK,KAAK,GAAI;AACjC,UAAA,QAAQ,MAAMA,OAAM;AACpB,UAAA,MAAMA,OAAM,CAAC;AACjB,UAAI,QAAQ,aAAa,QAAQ,IAAI,SAAS;AAAW,eAAO,IAAI,GAAG;AAAA,IACxE;AAAA,EAAA;AAGD,SAAO,OAAO,QAAQ,GAAG,YAAY,OAAO,QAAQ,QAAQ;AAErD,SAAA,CAAC,GAAG,MAAM;AAClB;"}