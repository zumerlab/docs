{"version":3,"file":"index-bkac8M6P.js","sources":["../src/prism/core.js"],"sourcesContent":["// Slimmed down Prism core with most high level functions removed\r\n\r\nvar plainTextGrammar = {};\r\nvar rest = Symbol();\r\nvar tokenize = Symbol();\r\n\r\nvar resolve = id => typeof id == 'string' ? languages[id] : id;\r\n\r\nvar languages = {\r\n\tplain: plainTextGrammar,\r\n\tplaintext: plainTextGrammar,\r\n\ttext: plainTextGrammar,\r\n\ttxt: plainTextGrammar,\r\n};\r\n\r\n/**\r\n * @param {string} text\r\n * @param {any} grammar\r\n */\r\nvar tokenizeText = (text, grammar) => (grammar[tokenize] || withoutTokenizer)(text, grammar);\r\n\r\n/**\r\n * @param {string} text\r\n * @param {any} grammar\r\n */\r\nvar withoutTokenizer = (text, grammar) => {\r\n\tvar startNode = [text];\r\n\tvar restGrammar;\r\n\tvar array = [], i = 0;\r\n\twhile (restGrammar = resolve(grammar[rest])) {\r\n\t\tdelete grammar[rest];\r\n\t\tObject.assign(grammar, restGrammar);\r\n\t}\r\n\r\n\tmatchGrammar(text, grammar, startNode, 0);\r\n\r\n\twhile (array[i++] = startNode[0], startNode = startNode[1]);\r\n\treturn array;\r\n}\r\n\r\nvar closingTag = '</span>';\r\nvar openingTags = '';\r\nvar closingTags = '';\r\n\r\nvar highlightTokens = tokens => {\r\n\tvar str = '', l = tokens.length, i = 0;\r\n\twhile (i < l) str += stringify(tokens[i++]);\r\n\treturn str;\r\n}\r\n\r\n/** @param {string | Token | (string | Token)[]} token */\r\nvar stringify = token => {\r\n\tif (token instanceof Token) {\r\n\t\tvar { type, alias, content } = token;\r\n\t\tvar prevOpening = openingTags;\r\n\t\tvar prevClosing = closingTags;\r\n\t\tvar opening = `<span class=\"token ${\r\n\t\t\ttype + (alias ? ' ' + alias : '') +\r\n\t\t\t(type == 'keyword' && typeof content == 'string' ? ' keyword-' + content : '')\r\n\t\t}\">`;\r\n\r\n\t\tclosingTags += closingTag;\r\n\t\topeningTags += opening;\r\n\t\tvar contentStr = stringify(content);\r\n\t\topeningTags = prevOpening;\r\n\t\tclosingTags = prevClosing;\r\n\t\treturn opening + contentStr + closingTag;\r\n\t}\r\n\r\n\tif (typeof token != 'string') return highlightTokens(token);\r\n\r\n\ttoken = token.replace(/&/g, '&amp;').replace(/</g, '&lt;');\r\n\tif (closingTags && token.includes('\\n')) {\r\n\t\treturn token.replace(/\\n/g, closingTags + '\\n' + openingTags);\r\n\t}\r\n\treturn token;\r\n}\r\n\r\nvar highlightText = (text, ref) => highlightTokens(tokenizeText(text, resolve(ref)));\r\n\r\n/**\r\n * @param {string} text\r\n * @param {any} grammar\r\n * @param {LinkedListNode} startNode\r\n * @param {number} startPos\r\n * @param {[string, number, number]} rematch\r\n * @returns {number | undefined}\r\n * @private\r\n *\r\n * @typedef {[string | Token, LinkedListNode?]} LinkedListNode\r\n */\r\nvar matchGrammar = (text, grammar, startNode, startPos, rematch) => {\r\n\tfor (var token in grammar) {\r\n\t\tif (grammar[token]) for (var j = 0, p = grammar[token], patterns = Array.isArray(p) ? p : [p]; j < patterns.length; ++j) {\r\n\t\t\tif (rematch && rematch[0] == token && rematch[1] == j) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar patternObj = patterns[j];\r\n\t\t\t/** @type {RegExp} */\r\n\t\t\tvar pattern = patternObj.pattern || patternObj;\r\n\t\t\tvar inside = resolve(patternObj.inside);\r\n\t\t\tvar lookbehind = patternObj.lookbehind;\r\n\t\t\tvar greedy = patternObj.greedy && pattern.global;\r\n\t\t\tvar alias = patternObj.alias;\r\n\r\n\t\t\tfor ( // iterate the token list and keep track of the current token/string position\r\n\t\t\t\tvar currentNode = startNode, pos = startPos;\r\n\t\t\t\tcurrentNode && (!rematch || pos < rematch[2]);\r\n\t\t\t\tpos += currentNode[0].length, currentNode = currentNode[1]\r\n\t\t\t) {\r\n\t\t\t\tvar str = currentNode[0];\r\n\t\t\t\tvar removeCount = 0;\r\n\t\t\t\tvar match, lookbehindLength;\r\n\r\n\t\t\t\tif (str instanceof Token) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpattern.lastIndex = greedy ? pos : 0;\r\n\t\t\t\tmatch = pattern.exec(greedy ? text : str);\r\n\r\n\t\t\t\tif (match && lookbehind && match[1]) {\r\n\t\t\t\t\t// change the match to remove the text matched by the Prism lookbehind group\r\n\t\t\t\t\tlookbehindLength = match[1].length;\r\n\t\t\t\t\tmatch.index += lookbehindLength;\r\n\t\t\t\t\tmatch[0] = match[0].slice(lookbehindLength);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (greedy) {\r\n\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (match[0]) {\r\n\t\t\t\t\t\t// find the node that contains the match\r\n\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\tvar from = match.index, to = from + match[0].length, l;\r\n\t\t\t\t\t\t\tfrom >= pos + (l = currentNode[0].length);\r\n\t\t\t\t\t\t\tcurrentNode = currentNode[1], pos += l\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\r\n\t\t\t\t\t\tif (currentNode[0] instanceof Token) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// find the last node which is affected by this match\r\n\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\tvar k = currentNode, p = pos;\r\n\t\t\t\t\t\t\t(p += k[0].length) < to;\r\n\t\t\t\t\t\t\tk = k[1], removeCount++\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// replace with the new match\r\n\t\t\t\t\t\tstr = text.slice(pos, p);\r\n\t\t\t\t\t\tmatch.index -= pos;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!(match && match[0])) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// eslint-disable-next-line no-redeclare\r\n\t\t\t\tvar from = match.index;\r\n\t\t\t\tvar matchStr = match[0];\r\n\t\t\t\tvar after = str.slice(from + matchStr.length);\r\n\t\t\t\tvar reach = pos + str.length;\r\n\t\t\t\tvar newToken = new Token(token, inside ? tokenizeText(matchStr, inside) : matchStr, matchStr, alias);\r\n\t\t\t\tvar next = currentNode, i = 0;\r\n\t\t\t\tvar nestedRematch;\r\n\r\n\t\t\t\twhile (next = next[1], i++ < removeCount);\r\n\r\n\t\t\t\tif (after) {\r\n\t\t\t\t\tif (!next || next[0] instanceof Token) next = [after, next];\r\n\t\t\t\t\telse next[0] = after + next[0];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tpos += from;\r\n\t\t\t\tcurrentNode[0] = from ? str.slice(0, from) : newToken;\r\n\r\n\t\t\t\tif (from) currentNode = currentNode[1] = [newToken, next];\r\n\t\t\t\telse currentNode[1] = next;\r\n\r\n\t\t\t\tif (removeCount) {\r\n\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\r\n\t\t\t\t\t// this can only happen if the current pattern is greedy\r\n\r\n\t\t\t\t\tmatchGrammar(text, grammar, currentNode, pos, nestedRematch = [token, j, reach]);\r\n\t\t\t\t\treach = nestedRematch[2];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (rematch && reach > rematch[2]) rematch[2] = reach;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Creates a new token.\r\n *\r\n * @param {string} type\r\n * @param {string | any[]} content\r\n * @param {string} matchedStr\r\n * @param {string} alias\r\n * @class\r\n */\r\nfunction Token(type, content, matchedStr, alias) {\r\n\tthis.type = type;\r\n\tthis.content = content;\r\n\tthis.alias = alias;\r\n\tthis.length = matchedStr.length;\r\n}\r\n\r\nexport {\r\n\trest,\r\n\ttokenize,\r\n\tToken,\r\n\tlanguages,\r\n\ttokenizeText,\r\n\twithoutTokenizer,\r\n\tresolve,\r\n\thighlightTokens,\r\n\thighlightText\r\n}\r\n"],"names":[],"mappings":"AAEA,IAAI,mBAAmB,CAAA;AACpB,IAAC,OAAO,OAAS;AACjB,IAAC,WAAW,OAAS;AAErB,IAAC,UAAU,QAAM,OAAO,MAAM,WAAW,UAAU,EAAE,IAAI;AAEzD,IAAC,YAAY;AAAA,EACf,OAAO;AAAA,EACP,WAAW;AAAA,EACX,MAAM;AAAA,EACN,KAAK;AACN;AAMG,IAAC,eAAe,CAAC,MAAM,aAAa,QAAQ,QAAQ,KAAK,kBAAkB,MAAM,OAAO;AAMxF,IAAC,mBAAmB,CAAC,MAAM,YAAY;AACzC,MAAI,YAAY,CAAC,IAAI;AACrB,MAAI;AACJ,MAAI,QAAQ,CAAA,GAAI,IAAI;AACpB,SAAO,cAAc,QAAQ,QAAQ,IAAI,CAAC,GAAG;AAC5C,WAAO,QAAQ,IAAI;AACnB,WAAO,OAAO,SAAS,WAAW;AAAA,EAClC;AAED,eAAa,MAAM,SAAS,WAAW,CAAC;AAExC,SAAO,MAAM,GAAG,IAAI,UAAU,CAAC,GAAG,YAAY,UAAU,CAAC;AAAE;AAC3D,SAAO;AACR;AAEA,IAAI,aAAa;AACjB,IAAI,cAAc;AAClB,IAAI,cAAc;AAEf,IAAC,kBAAkB,YAAU;AAC/B,MAAI,MAAM,IAAI,IAAI,OAAO,QAAQ,IAAI;AACrC,SAAO,IAAI;AAAG,WAAO,UAAU,OAAO,GAAG,CAAC;AAC1C,SAAO;AACR;AAGA,IAAI,YAAY,WAAS;AACxB,MAAI,iBAAiB,OAAO;AAC3B,QAAI,EAAE,MAAM,OAAO,QAAO,IAAK;AAC/B,QAAI,cAAc;AAClB,QAAI,cAAc;AAClB,QAAI,UAAU,sBACb,QAAQ,QAAQ,MAAM,QAAQ,OAC7B,QAAQ,aAAa,OAAO,WAAW,WAAW,cAAc,UAAU,GAC3E;AAED,mBAAe;AACf,mBAAe;AACf,QAAI,aAAa,UAAU,OAAO;AAClC,kBAAc;AACd,kBAAc;AACd,WAAO,UAAU,aAAa;AAAA,EAC9B;AAED,MAAI,OAAO,SAAS;AAAU,WAAO,gBAAgB,KAAK;AAE1D,UAAQ,MAAM,QAAQ,MAAM,OAAO,EAAE,QAAQ,MAAM,MAAM;AACzD,MAAI,eAAe,MAAM,SAAS,IAAI,GAAG;AACxC,WAAO,MAAM,QAAQ,OAAO,cAAc,OAAO,WAAW;AAAA,EAC5D;AACD,SAAO;AACR;AAEG,IAAC,gBAAgB,CAAC,MAAM,QAAQ,gBAAgB,aAAa,MAAM,QAAQ,GAAG,CAAC,CAAC;AAanF,IAAI,eAAe,CAAC,MAAM,SAAS,WAAW,UAAU,YAAY;AACnE,WAAS,SAAS,SAAS;AAC1B,QAAI,QAAQ,KAAK;AAAG,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG,WAAW,MAAM,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACxH,YAAI,WAAW,QAAQ,CAAC,KAAK,SAAS,QAAQ,CAAC,KAAK,GAAG;AACtD;AAAA,QACA;AAED,YAAI,aAAa,SAAS,CAAC;AAE3B,YAAI,UAAU,WAAW,WAAW;AACpC,YAAI,SAAS,QAAQ,WAAW,MAAM;AACtC,YAAI,aAAa,WAAW;AAC5B,YAAI,SAAS,WAAW,UAAU,QAAQ;AAC1C,YAAI,QAAQ,WAAW;AAEvB,iBACK,cAAc,WAAW,MAAM,UACnC,gBAAgB,CAAC,WAAW,MAAM,QAAQ,CAAC,IAC3C,OAAO,YAAY,CAAC,EAAE,QAAQ,cAAc,YAAY,CAAC,GACxD;AACD,cAAI,MAAM,YAAY,CAAC;AACvB,cAAI,cAAc;AAClB,cAAI,OAAO;AAEX,cAAI,eAAe,OAAO;AACzB;AAAA,UACA;AAED,kBAAQ,YAAY,SAAS,MAAM;AACnC,kBAAQ,QAAQ,KAAK,SAAS,OAAO,GAAG;AAExC,cAAI,SAAS,cAAc,MAAM,CAAC,GAAG;AAEpC,+BAAmB,MAAM,CAAC,EAAE;AAC5B,kBAAM,SAAS;AACf,kBAAM,CAAC,IAAI,MAAM,CAAC,EAAE,MAAM,gBAAgB;AAAA,UAC1C;AAED,cAAI,QAAQ;AACX,gBAAI,CAAC,OAAO;AACX;AAAA,YACA;AAED,gBAAI,MAAM,CAAC,GAAG;AAEb,uBACK,OAAO,MAAM,OAAO,KAAK,OAAO,MAAM,CAAC,EAAE,QAAQ,GACrD,QAAQ,OAAO,IAAI,YAAY,CAAC,EAAE,SAClC,cAAc,YAAY,CAAC,GAAG,OAAO;AACrC;AAGD,kBAAI,YAAY,CAAC,aAAa,OAAO;AACpC;AAAA,cACA;AAGD,uBACK,IAAI,aAAa,IAAI,MACxB,KAAK,EAAE,CAAC,EAAE,UAAU,IACrB,IAAI,EAAE,CAAC,GAAG;AACV;AAGD,oBAAM,KAAK,MAAM,KAAK,CAAC;AACvB,oBAAM,SAAS;AAAA,YACf;AAAA,UACD;AACD,cAAI,EAAE,SAAS,MAAM,CAAC,IAAI;AACzB;AAAA,UACA;AAGD,cAAI,OAAO,MAAM;AACjB,cAAI,WAAW,MAAM,CAAC;AACtB,cAAI,QAAQ,IAAI,MAAM,OAAO,SAAS,MAAM;AAC5C,cAAI,QAAQ,MAAM,IAAI;AACtB,cAAI,WAAW,IAAI,MAAM,OAAO,SAAS,aAAa,UAAU,MAAM,IAAI,UAAU,UAAU,KAAK;AACnG,cAAI,OAAO,aAAa,IAAI;AAC5B,cAAI;AAEJ,iBAAO,OAAO,KAAK,CAAC,GAAG,MAAM;AAAY;AAEzC,cAAI,OAAO;AACV,gBAAI,CAAC,QAAQ,KAAK,CAAC,aAAa;AAAO,qBAAO,CAAC,OAAO,IAAI;AAAA;AACrD,mBAAK,CAAC,IAAI,QAAQ,KAAK,CAAC;AAAA,UAElC;AACI,iBAAO;AACP,sBAAY,CAAC,IAAI,OAAO,IAAI,MAAM,GAAG,IAAI,IAAI;AAE7C,cAAI;AAAM,0BAAc,YAAY,CAAC,IAAI,CAAC,UAAU,IAAI;AAAA;AACnD,wBAAY,CAAC,IAAI;AAEtB,cAAI,aAAa;AAIhB,yBAAa,MAAM,SAAS,aAAa,KAAK,gBAAgB,CAAC,OAAO,GAAG,KAAK,CAAC;AAC/E,oBAAQ,cAAc,CAAC;AAAA,UACvB;AAED,cAAI,WAAW,QAAQ,QAAQ,CAAC;AAAG,oBAAQ,CAAC,IAAI;AAAA,QAChD;AAAA,MACD;AAAA,EACD;AACF;AAWA,SAAS,MAAM,MAAM,SAAS,YAAY,OAAO;AAChD,OAAK,OAAO;AACZ,OAAK,UAAU;AACf,OAAK,QAAQ;AACb,OAAK,SAAS,WAAW;AAC1B;"}