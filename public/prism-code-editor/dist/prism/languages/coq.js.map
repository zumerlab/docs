{"version":3,"file":"coq.js","sources":["../../../src/prism/languages/coq.js"],"sourcesContent":["import { languages } from '../core.js';\r\nimport { nested, re } from '../utils/shared.js';\r\n\r\n// https://github.com/coq/coq\r\n\r\nvar string = {\r\n\tpattern: /\"(?:[^\"]|\"\")*\"(?!\")/g,\r\n\tgreedy: true\r\n};\r\n\r\nvar commentSource = nested(/\\(\\*(?:[^(*]|\\((?!\\*)|\\*(?!\\))|<self>)*\\*\\)/.source, 2);\r\n\r\nlanguages.coq = {\r\n\t'comment': RegExp(commentSource),\r\n\t'string': string,\r\n\t'attribute': [\r\n\t\t{\r\n\t\t\tpattern: re(/#\\[(?:[^[\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\((?!\\*)|<0>)*\\]/.source, [commentSource], 'g'),\r\n\t\t\tgreedy: true,\r\n\t\t\talias: 'attr-name',\r\n\t\t\tinside: {\r\n\t\t\t\t'comment': RegExp(commentSource),\r\n\t\t\t\t'string': string,\r\n\t\t\t\t'operator': /=/,\r\n\t\t\t\t'punctuation': /^#\\[|\\]$|[(),]/\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\r\n\t\t\talias: 'attr-name'\r\n\t\t}\r\n\t],\r\n\r\n\t'keyword': /\\b(?:Abort|About|Add|Admit|Admitted|All|Arguments|As|Assumptions|Axioms?|Back|BackTo|Backtrace|BinOp|BinOpSpec|BinRel|Bind|Blacklist|Canonical|Case|Cd|Check|Class|Classes|Close|CoFixpoint|CoInductive|Coercions?|Collection|Combined|Compute|Conjectures?|Constants?|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|End|Entry|Equality|Eval|Example|Existentials?|Existing|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|Fixpoint|Flags|Focus|From|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|HintDb|Hints?|Hypothes[ei]s|IF|Identity|Immediate|Implicits?|Import|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instances?|Intros?|Inversion|Inversion_clear|JSON|Language|Left|Lemma|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac2?|ML|Match|Method|Minimality|Modules?|Morphism|Next|NoInline|Notation|Number|OCaml|Obligations?|Opaque|Open|Optimize|Parameters?|Parametric|Paths?|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|S?Prop|PropBinOp|PropU?Op|Property|Proposition|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|Require|Reserved|Reset|Resolve|Restart|Rewrite|Right|Rings?|Saturate|Save|Scheme|Scopes?|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Setoid|Show|Signatures|Solver?|Sort|Sortclass|Sorted|Spec|Step|Strategies|Strategy|String|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|Theorem|Time|Timeout|To|Transparent|Typeclasses|Types?|Typing|UnOp|UnOpSpec|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universes?|Unshelve|Variables?|Variant|Verbose|View|Visibility|Zify|_|apply|as|at|by|cofix|else|end|exists2?|fix|for|forall|fun|if|in|[lLS]et|match|measure|move|removed|return|struct|then|using|wf|where|with)\\b/,\r\n\r\n\t'number': /\\b(?:0x[a-f\\d][a-f\\d_]*(?:\\.[a-f\\d_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\r\n\r\n\t'punct': {\r\n\t\tpattern: /@\\{|\\{\\||\\[=|:>/,\r\n\t\talias: 'punctuation'\r\n\t},\r\n\t'operator': /\\/\\\\|\\\\\\/|\\.{2,3}|::?=|\\*\\*|[=-]>|<->?|<<:|<[+:=<>]|>=|>->|\\|[-|]|[?@~'%&|^!=<>/*+-]/,\r\n\t'punctuation': /\\.\\(|`[({]|@\\{|\\{\\||\\[=|:>|[()[\\]{}.,:;]/\r\n};\r\n"],"names":[],"mappings":";;AAKA,IAAI,SAAS;AAAA,EACZ,SAAS;AAAA,EACT,QAAQ;AACT;AAEA,IAAI,gBAAgB,OAAO,uDAAsD,CAAC;AAElF,UAAU,MAAM;AAAA,EACf,WAAW,OAAO,aAAa;AAAA,EAC/B,UAAU;AAAA,EACV,aAAa;AAAA,IACZ;AAAA,MACC,SAAS,GAAG,4DAA8D,CAAC,aAAa,GAAG,GAAG;AAAA,MAC9F,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,QACP,WAAW,OAAO,aAAa;AAAA,QAC/B,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,eAAe;AAAA,MACf;AAAA,IACD;AAAA,IACD;AAAA,MACC,SAAS;AAAA,MACT,OAAO;AAAA,IACP;AAAA,EACD;AAAA,EAED,WAAW;AAAA,EAEX,UAAU;AAAA,EAEV,SAAS;AAAA,IACR,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EACD,YAAY;AAAA,EACZ,eAAe;AAChB;"}