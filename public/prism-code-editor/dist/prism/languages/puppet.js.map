{"version":3,"file":"puppet.js","sources":["../../../src/prism/languages/puppet.js"],"sourcesContent":["import { languages, rest } from '../core.js';\r\nimport { boolean } from '../utils/patterns.js';\r\n\r\nvar interpolation = [\r\n\t{\r\n\t\t// Allow for one nested level of braces inside interpolation\r\n\t\tpattern: /(^|[^\\\\])\\$\\{(?:[^{}\"']|\\{[^}]*\\}|([\"'])(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)+\\}/,\r\n\t\tlookbehind: true,\r\n\t\tinside: {\r\n\t\t\t'short-variable': {\r\n\t\t\t\t// Negative look-ahead prevent wrong highlighting of functions\r\n\t\t\t\tpattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\talias: 'variable',\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': /::/\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'delimiter': {\r\n\t\t\t\tpattern: /^\\$/,\r\n\t\t\t\talias: 'variable'\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tpattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\r\n\t\tlookbehind: true,\r\n\t\talias: 'variable',\r\n\t\tinside: {\r\n\t\t\t'punctuation': /::/\r\n\t\t}\r\n\t}\r\n];\r\n\r\ninterpolation[0].inside[rest] = languages.puppet = {\r\n\t'heredoc': [\r\n\t\t// Matches the content of a quoted heredoc string (subject to interpolation)\r\n\t\t{\r\n\t\t\tpattern: /(@\\(\"([^\\n\"/):]+)\"(?:\\/[nrts$uL]*)?\\).*\\n)(?:.*\\n)*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'string',\r\n\t\t\tinside: {\r\n\t\t\t\t// Matches the end tag\r\n\t\t\t\t'punctuation': /(?!\\s).*\\S(?= *$)/,\r\n\t\t\t\t// See interpolation below\r\n\t\t\t\t'interpolation': interpolation\r\n\t\t\t}\r\n\t\t},\r\n\t\t// Matches the content of an unquoted heredoc string (no interpolation)\r\n\t\t{\r\n\t\t\tpattern: /(@\\(([^\\n\"/):]+)(?:\\/[nrts$uL]*)?\\).*\\n)(?:.*\\n)*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/g,\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true,\r\n\t\t\talias: 'string',\r\n\t\t\tinside: {\r\n\t\t\t\t// Matches the end tag\r\n\t\t\t\t'punctuation': /(?!\\s).*\\S(?= *$)/\r\n\t\t\t}\r\n\t\t},\r\n\t\t// Matches the start tag of heredoc strings\r\n\t\t{\r\n\t\t\tpattern: /@\\(\"?(?:[^\\n\"/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\r\n\t\t\talias: 'string',\r\n\t\t\tinside: {\r\n\t\t\t\t'punctuation': /(?![(@]).+(?=.)/\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\t'multiline-comment': {\r\n\t\tpattern: /\\/\\*[\\s\\S]*?\\*\\//g,\r\n\t\tgreedy: true,\r\n\t\talias: 'comment'\r\n\t},\r\n\t'regex': {\r\n\t\t// Must be prefixed with the keyword \"node\" or a non-word char\r\n\t\tpattern: /(\\bnode\\s+|[~=([{,]\\s*|[=+]>\\s*|^\\s*)\\/(?:\\\\[\\s\\S]|[^\\\\/])+\\/(?:[imx]+\\b|\\B)/g,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t// Extended regexes must have the x flag. They can contain single-line comments.\r\n\t\t\t'extended-regex': {\r\n\t\t\t\tpattern: /^\\/(?:\\\\[\\s\\S]|[^\\\\/])+\\/[im]*x[im]*$/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'comment': /#.*/\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t'comment': {\r\n\t\tpattern: /#.*/g,\r\n\t\tgreedy: true,\r\n\t},\r\n\t'string': {\r\n\t\t// Allow for one nested level of double quotes inside interpolation\r\n\t\tpattern: /([\"'])(?:\\$\\{(?:[^}\"']|([\"'])(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)+\\}|\\$(?!\\{)|\\\\[\\s\\S]|(?!\\1)[^\\\\$])*\\1/g,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'double-quoted': {\r\n\t\t\t\tpattern: /^\"[\\s\\S]*\"$/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'interpolation': interpolation\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t'variable': {\r\n\t\tpattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\r\n\t\tinside: {\r\n\t\t\t'punctuation': /::/\r\n\t\t}\r\n\t},\r\n\t'attr-name': /(?:\\b\\w+|\\*)(?=\\s*=>)/,\r\n\t'function': [\r\n\t\t{\r\n\t\t\tpattern: /(\\.)(?!\\d)\\w+/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t/\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/\r\n\t],\r\n\t'number': /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\r\n\t'boolean': boolean,\r\n\t// Includes words reserved for future use\r\n\t'keyword': /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\r\n\t'datatype': {\r\n\t\tpattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\r\n\t\talias: 'symbol'\r\n\t},\r\n\t'operator': /=[=~>]?|![=~]?|<<\\|?|<[=~|-]?|>[>=]?|->?|~>|\\|>?>?|[%/*+?]|\\b(?:and|in|or)\\b/,\r\n\t'punctuation': /[()[\\]{}.,;]|:+/\r\n};\r\n"],"names":[],"mappings":";;AAGA,IAAI,gBAAgB;AAAA,EACnB;AAAA;AAAA,IAEC,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,MACP,kBAAkB;AAAA;AAAA,QAEjB,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,QAAQ;AAAA,UACP,eAAe;AAAA,QACf;AAAA,MACD;AAAA,MACD,aAAa;AAAA,QACZ,SAAS;AAAA,QACT,OAAO;AAAA,MACP;AAAA,IACD;AAAA,EACD;AAAA,EACD;AAAA,IACC,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,QAAQ;AAAA,MACP,eAAe;AAAA,IACf;AAAA,EACD;AACF;AAEA,cAAc,CAAC,EAAE,OAAO,IAAI,IAAI,UAAU,SAAS;AAAA,EAClD,WAAW;AAAA;AAAA,IAEV;AAAA,MACC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,QAAQ;AAAA;AAAA,QAEP,eAAe;AAAA;AAAA,QAEf,iBAAiB;AAAA,MACjB;AAAA,IACD;AAAA;AAAA,IAED;AAAA,MACC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA;AAAA,QAEP,eAAe;AAAA,MACf;AAAA,IACD;AAAA;AAAA,IAED;AAAA,MACC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,QAAQ;AAAA,QACP,eAAe;AAAA,MACf;AAAA,IACD;AAAA,EACD;AAAA,EACD,qBAAqB;AAAA,IACpB,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,EACP;AAAA,EACD,SAAS;AAAA;AAAA,IAER,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA;AAAA,MAEP,kBAAkB;AAAA,QACjB,SAAS;AAAA,QACT,QAAQ;AAAA,UACP,WAAW;AAAA,QACX;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EACD,WAAW;AAAA,IACV,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EACD,UAAU;AAAA;AAAA,IAET,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,iBAAiB;AAAA,QAChB,SAAS;AAAA,QACT,QAAQ;AAAA,UACP,iBAAiB;AAAA,QACjB;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EACD,YAAY;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,MACP,eAAe;AAAA,IACf;AAAA,EACD;AAAA,EACD,aAAa;AAAA,EACb,YAAY;AAAA,IACX;AAAA,MACC,SAAS;AAAA,MACT,YAAY;AAAA,IACZ;AAAA,IACD;AAAA,EACA;AAAA,EACD,UAAU;AAAA,EACV,WAAW;AAAA;AAAA,EAEX,WAAW;AAAA,EACX,YAAY;AAAA,IACX,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EACD,YAAY;AAAA,EACZ,eAAe;AAChB;"}