{"version":3,"file":"xquery.js","sources":["../../../src/prism/languages/xquery.js"],"sourcesContent":["import { languages, Token, tokenize, withoutTokenizer } from '../core.js';\r\nimport { extend } from '../utils/language.js';\r\nimport { re } from '../utils/shared.js';\r\nimport './markup.js';\r\n\r\nvar xquery = languages.xquery = extend('xml', {\r\n\t'xquery-comment': {\r\n\t\tpattern: /\\(:[\\s\\S]*?:\\)/g,\r\n\t\tgreedy: true,\r\n\t\talias: 'comment'\r\n\t},\r\n\t'string': {\r\n\t\tpattern: /\"(?:\"\"|[^\"])*\"|'(?:''|[^'])*'/g,\r\n\t\tgreedy: true\r\n\t},\r\n\t'extension': {\r\n\t\tpattern: /\\(#.+?#\\)/,\r\n\t\talias: 'symbol'\r\n\t},\r\n\t'variable': /\\$[-\\w:]+/,\r\n\t'axis': {\r\n\t\tpattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\r\n\t\tlookbehind: true,\r\n\t\talias: 'operator'\r\n\t},\r\n\t'keyword-operator': {\r\n\t\tpattern: /(^|[^:-])\\b(?:and|castable as|eq|except|[gl][et]|i?div|instance of|intersect|is|mod|ne|or|union)\\b(?=$|[^:-])/,\r\n\t\tlookbehind: true,\r\n\t\talias: 'operator'\r\n\t},\r\n\t'keyword': {\r\n\t\tpattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'function': /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\r\n\t'xquery-element': {\r\n\t\tpattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\r\n\t\tlookbehind: true,\r\n\t\talias: 'tag'\r\n\t},\r\n\t'xquery-attribute': {\r\n\t\tpattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\r\n\t\tlookbehind: true,\r\n\t\talias: 'attr-name'\r\n\t},\r\n\t'builtin': {\r\n\t\tpattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:ENTITIES|ENTITY|ID|IDREFS?|NCName|NMTOKENS?|NOTATION|Q?Name|anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|int|integer|language|long|negativeInteger|nonNegativeInteger|nonPositiveInteger|normalizedString|positiveInteger|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'number': /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\r\n\t'operator': {\r\n\t\tpattern: /[=?|@*+]|\\.\\.?|:=|!=|<[=<]?|>[=>]?|(\\s)-(?!\\S)/,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'punctuation': /[()[\\]{},:;/]/,\r\n\t[tokenize]: (code, grammar) => walkTokens(withoutTokenizer(code, grammar), code, 0)\r\n});\r\n\r\nvar tag = xquery.tag;\r\nvar attrValue = tag.inside['attr-value'][0];\r\nvar isText = token => token && (!token.type || token.type == 'plain-text');\r\n\r\n/**\r\n * @param {(string | Token)[]} tokens\r\n * @param {string} code\r\n * @param {number} position\r\n */\r\nvar walkTokens = (tokens, code, position) => {\r\n\tfor (var i = 0, openedTags = [], l = 0; i < tokens.length; i++) {\r\n\t\tvar token = tokens[i];\r\n\t\tvar length = token.length;\r\n\t\tvar type = token.type;\r\n\t\tvar notTagNorBrace = !type;\r\n\t\tvar last, tag, start, plainText, content;\r\n\r\n\t\tif (type && type != 'comment') {\r\n\t\t\tcontent = token.content;\r\n\t\t\tif (type == 'tag') {\r\n\t\t\t\t// We found a tag, now find its kind\r\n\t\t\t\tstart = content[0].length;\r\n\t\t\t\ttag = code.substr(position + start, content[1].length);\r\n\t\t\t\tif (start > 1) {\r\n\t\t\t\t\t// Closing tag\r\n\t\t\t\t\tif (l && openedTags[l - 1][0] == tag) {\r\n\t\t\t\t\t\t// Pop matching opening tag\r\n\t\t\t\t\t\tl--;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (content[content.length - 1].length < 2) {\r\n\t\t\t\t\t\t// Opening tag\r\n\t\t\t\t\t\topenedTags[l++] = [tag, 0];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (l && type == 'punctuation') {\r\n\t\t\t\tlast = openedTags[l - 1];\r\n\t\t\t\tif (content == '{') {\r\n\t\t\t\t\t// Ignore `{{`\r\n\t\t\t\t\tif (code[position + 1] == content) {\r\n\t\t\t\t\t\ttokens[i + 1] = content;\r\n\t\t\t\t\t\tnotTagNorBrace = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlast[1]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (last[1] && content == '}') last[1]--;\r\n\t\t\t\telse {\r\n\t\t\t\t\tnotTagNorBrace = true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnotTagNorBrace = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (notTagNorBrace && l && !openedTags[l - 1][1]) {\r\n\t\t\t// Here we are inside a tag, and not inside an XQuery expression.\r\n\t\t\t// That's plain text: drop any tokens matched.\r\n\t\t\tstart = position;\r\n\r\n\t\t\t// And merge text with adjacent text\r\n\t\t\tif (isText(tokens[i + 1])) {\r\n\t\t\t\tlength += tokens[i + 1].length;\r\n\t\t\t\ttokens.splice(i + 1, 1);\r\n\t\t\t}\r\n\t\t\tif (isText(tokens[i - 1])) {\r\n\t\t\t\tstart -= tokens[--i].length;\r\n\t\t\t\ttokens.splice(i, 1);\r\n\t\t\t}\r\n\r\n\t\t\tplainText = code.slice(start, position + length);\r\n\t\t\ttokens[i] = new Token('plain-text', plainText, plainText);\r\n\t\t}\r\n\t\tposition += length;\r\n\t}\r\n\treturn tokens;\r\n};\r\n\r\n// Allow for two levels of nesting\r\nvar expression = [/\\{(?!\\{)(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})*\\}/.source];\r\n\r\ntag.pattern = re(/<\\/?(?!\\d)[^\\s/=>$<%]+(?:\\s+[^\\s/=>]+(?:\\s*=\\s*([\"'])(?:\\{\\{|<0>|(?!\\1)[^{])*\\1)?)*\\s*\\/?>/.source, expression, 'g');\r\nattrValue.pattern = re(/(=\\s*)([\"'])(?:\\{\\{|<0>|(?!\\2)[^{])*\\2/.source, expression, 'g');\r\nattrValue.inside['expression'] = {\r\n\tpattern: re(/((?:^|[^{])(?:\\{\\{)*)<0>/.source, expression),\r\n\tlookbehind: true,\r\n\talias: 'language-xquery',\r\n\tinside: xquery\r\n};\r\ndelete xquery['markup-bracket'];\r\n"],"names":["tag"],"mappings":"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"}