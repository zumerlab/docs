{"version":3,"file":"qsharp.js","sources":["../../../src/prism/languages/qsharp.js"],"sourcesContent":["import { languages } from '../core.js';\r\nimport { boolean } from '../utils/patterns.js';\r\nimport { nested, re, replace } from '../utils/shared.js';\r\n\r\n// https://docs.microsoft.com/en-us/azure/quantum/user-guide/language/typesystem/\r\n// https://github.com/microsoft/qsharp-language/tree/main/Specifications/Language/5_Grammar\r\nvar keywords = /\\b(?:Adj|BigInt|Bool|Ctl|Double|false|true|Int|One|Pauli[IXYZ]?|Qubit|Range|Result|String|Unit|Zero|[Aa]djoint|apply|as|auto|body|borrow|borrowing|[Cc]ontrolled|distribute|elif|else|fail|fixup|for|function|i[fns]|internal|intrinsic|invert|[ls]et|mutable|namespace|new|newtype|open|operation|repeat|return|self|until|use|using|while|within)\\b/;\r\n\r\n// types\r\nvar identifier = /\\b(?!\\d)\\w+\\b/.source;\r\nvar qualifiedName = replace(/<0>(?:\\s*\\.\\s*<0>)*/.source, [identifier]);\r\n\r\nvar typeInside = {\r\n\t'keyword': keywords,\r\n\t'punctuation': /[<>()?,.:[\\]]/\r\n};\r\n\r\n// strings\r\nvar regularString = /\"(?:\\\\.|[^\\\\\"])*\"/.source;\r\n\r\n// single line\r\nvar interpolationExpr = nested(replace(/\\{(?:[^\"{}]|<0>|<self>)*\\}/.source, [regularString]), 2);\r\n\r\nlanguages.qs = languages.qsharp = {\r\n\t'comment': /\\/\\/.*/,\r\n\t'interpolation-string': {\r\n\t\tpattern: re(/\\$\"(?:\\\\.|<0>|[^\\\\\"{])*\"/.source, [interpolationExpr], 'g'),\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'interpolation': {\r\n\t\t\t\tpattern: re(/((?:^|[^\\\\])(?:\\\\\\\\)*)<0>/.source, [interpolationExpr]),\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': /^\\{|\\}$/,\r\n\t\t\t\t\t'expression': {\r\n\t\t\t\t\t\tpattern: /[\\s\\S]+/,\r\n\t\t\t\t\t\talias: 'language-qsharp',\r\n\t\t\t\t\t\tinside: 'qs'\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'string': /[\\s\\S]+/\r\n\t\t}\r\n\t},\r\n\t'string': [\r\n\t\t{\r\n\t\t\tpattern: re(/(^|[^$\\\\])<0>/.source, [regularString], 'g'),\r\n\t\t\tlookbehind: true,\r\n\t\t\tgreedy: true\r\n\t\t}\r\n\t],\r\n\t'class-name': [\r\n\t\t{\r\n\t\t\t// open Microsoft.Quantum.Canon;\r\n\t\t\t// open Microsoft.Quantum.Canon as CN;\r\n\t\t\tpattern: re(/(\\b(?:as|open)\\s+)<0>(?=\\s*(?:;|as\\b))/.source, [qualifiedName]),\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: typeInside\r\n\t\t},\r\n\t\t{\r\n\t\t\t// namespace Quantum.App1;\r\n\t\t\tpattern: re(/(\\bnamespace\\s+)<0>(?=\\s*\\{)/.source, [qualifiedName]),\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: typeInside\r\n\t\t},\r\n\t],\r\n\t'keyword': keywords,\r\n\t'boolean': boolean,\r\n\t'function': /\\b\\w+(?=\\()/,\r\n\t'range': {\r\n\t\tpattern: /\\.\\./,\r\n\t\talias: 'operator'\r\n\t},\r\n\t'number': /(?:\\b0(?:x[a-f\\d]+|b[01]+|o[0-7]+)|(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d*)?)(?:e[+-]?\\d+)?)l?\\b/i,\r\n\t'operator': /\\b(?:and\\b=?|or\\b=?|not\\b)|<[=-]|[=-]>|(?:>>>|<<<|\\^\\^\\^|\\|\\|\\||&&&|w\\/|[*/^!=%+-])=?|~~~/,\r\n\t'punctuation': /::|[()[\\]{}.,:;]/\r\n};\r\n"],"names":[],"mappings":";;;AAMA,IAAI,WAAW;AAGf,IAAI,aAAa;AACjB,IAAI,gBAAgB,QAAQ,0BAA8B,CAAC,UAAU,CAAC;AAEtE,IAAI,aAAa;AAAA,EAChB,WAAW;AAAA,EACX,eAAe;AAChB;AAGA,IAAI,gBAAgB;AAGpB,IAAI,oBAAoB,OAAO,QAAQ,gCAAqC,CAAC,aAAa,CAAC,GAAG,CAAC;AAE/F,UAAU,KAAK,UAAU,SAAS;AAAA,EACjC,WAAW;AAAA,EACX,wBAAwB;AAAA,IACvB,SAAS,GAAG,iCAAmC,CAAC,iBAAiB,GAAG,GAAG;AAAA,IACvE,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,iBAAiB;AAAA,QAChB,SAAS,GAAG,mCAAoC,CAAC,iBAAiB,CAAC;AAAA,QACnE,YAAY;AAAA,QACZ,QAAQ;AAAA,UACP,eAAe;AAAA,UACf,cAAc;AAAA,YACb,SAAS;AAAA,YACT,OAAO;AAAA,YACP,QAAQ;AAAA,UACR;AAAA,QACD;AAAA,MACD;AAAA,MACD,UAAU;AAAA,IACV;AAAA,EACD;AAAA,EACD,UAAU;AAAA,IACT;AAAA,MACC,SAAS,GAAG,mBAAwB,CAAC,aAAa,GAAG,GAAG;AAAA,MACxD,YAAY;AAAA,MACZ,QAAQ;AAAA,IACR;AAAA,EACD;AAAA,EACD,cAAc;AAAA,IACb;AAAA;AAAA;AAAA,MAGC,SAAS,GAAG,8CAAiD,CAAC,aAAa,CAAC;AAAA,MAC5E,YAAY;AAAA,MACZ,QAAQ;AAAA,IACR;AAAA,IACD;AAAA;AAAA,MAEC,SAAS,GAAG,oCAAuC,CAAC,aAAa,CAAC;AAAA,MAClE,YAAY;AAAA,MACZ,QAAQ;AAAA,IACR;AAAA,EACD;AAAA,EACD,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,IACR,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EACD,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,eAAe;AAChB;"}