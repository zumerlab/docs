{"version":3,"file":"haskell.js","sources":["../../../src/prism/languages/haskell.js"],"sourcesContent":["import { languages } from '../core.js';\r\nimport { clikePunctuation } from '../utils/patterns.js';\r\n\r\nlanguages.hs = languages.haskell = {\r\n\t'comment': {\r\n\t\tpattern: /(^|[^#$?@~.:\\\\%&|^!=<>/*+-])(?:--(?:(?=.)[^#$?@~.:\\\\%&|^!=<>/*+-].*|$)|\\{-[\\s\\S]*?-\\})/m,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'char': {\r\n\t\tpattern: /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|ACK|[BD]EL|BS|CAN|CR|DC[1-4]|DLE|EM|ENQ|EOT|ESC|ET[BX]|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SOH?|SP|STX|SUB|SYN|US|VT|\\d+|o[0-7]+|x[a-fA-F\\d]+))'/,\r\n\t\talias: 'string'\r\n\t},\r\n\t'string': {\r\n\t\tpattern: /\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/g,\r\n\t\tgreedy: true\r\n\t},\r\n\t'keyword': /\\b(?:case|class|data|deriving|do|else|if|in|infix[lr]|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\r\n\t'import-statement': {\r\n\t\t// The imported or hidden names are not included in this import\r\n\t\t// statement. This is because we want to highlight those exactly like\r\n\t\t// we do for the names in the program.\r\n\t\tpattern: /(^[ \\t]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\r\n\t\tlookbehind: true,\r\n\t\tinside: {\r\n\t\t\t'keyword': /\\b(?:as|hiding|import|qualified)\\b/,\r\n\t\t\t'punctuation': /\\./\r\n\t\t}\r\n\t},\r\n\t// These are builtin variables only. Constructors are highlighted later as a constant.\r\n\t'builtin': /\\b(?:abs|a?cosh?|all|an[dy]|appendFile|approxRational|asTypeOf|a?sinh?|atan[2h]?|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|[ft]ail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|fold[lr]1?|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|ma[px]|mapM|mapM_?|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|ord?|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read(?:s?|Dec|File|Float|Hex|IO|Int|List|LitChar|Ln|Oct|Paren|Signed|sPrec)|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scan[lr]1?|seq|sequence_?|show(?:s|Char|Int|List|LitChar|Paren|Signed|String|sPrec)?|significand|signum|snd|sort|span|splitAt|sqrt|subtract|succ|sum|take|takeWhile|tanh?|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip3?|userError|words|writeFile|zip3?|zipWith3?)\\b/,\r\n\t// decimal integers and floating point numbers | octal integers | hexadecimal integers\r\n\t'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[a-f\\d]+)\\b/i,\r\n\t'operator': [\r\n\t\t{\r\n\t\t\t// infix operator\r\n\t\t\tpattern: /`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/g,\r\n\t\t\tgreedy: true\r\n\t\t},\r\n\t\t{\r\n\t\t\t// function composition\r\n\t\t\tpattern: /(\\s)\\.(?!\\S)/,\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t// Most of this is needed because of the meaning of a single '.'.\r\n\t\t// If it stands alone freely, it is the function composition.\r\n\t\t// It may also be a separator between a module name and an identifier => no\r\n\t\t// operator. If it comes together with other special characters it is an\r\n\t\t// operator too.\r\n\t\t//\r\n\t\t// This regex means: /[!#$%*=?&@|~.:<>^\\\\/+-]+/ without /\\./.\r\n\t\t/[#$?@~:\\\\%&|^!=<>/*+-][.#$?@~:\\\\%&|^!=<>/*+-]*|\\.[.#$?@~:\\\\%&|^!=<>/*+-]+/,\r\n\t],\r\n\t// In Haskell, nearly everything is a variable, do not highlight these.\r\n\t'hvariable': {\r\n\t\tpattern: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*/,\r\n\t\tinside: {\r\n\t\t\t'punctuation': /\\./\r\n\t\t}\r\n\t},\r\n\t'constant': {\r\n\t\tpattern: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*/,\r\n\t\tinside: {\r\n\t\t\t'punctuation': /\\./\r\n\t\t}\r\n\t},\r\n\t'punctuation': clikePunctuation\r\n};\r\n"],"names":[],"mappings":";;AAGA,UAAU,KAAK,UAAU,UAAU;AAAA,EAClC,WAAW;AAAA,IACV,SAAS;AAAA,IACT,YAAY;AAAA,EACZ;AAAA,EACD,QAAQ;AAAA,IACP,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AAAA,EACD,UAAU;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EACD,WAAW;AAAA,EACX,oBAAoB;AAAA;AAAA;AAAA;AAAA,IAInB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,MACP,WAAW;AAAA,MACX,eAAe;AAAA,IACf;AAAA,EACD;AAAA;AAAA,EAED,WAAW;AAAA;AAAA,EAEX,UAAU;AAAA,EACV,YAAY;AAAA,IACX;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,QAAQ;AAAA,IACR;AAAA,IACD;AAAA;AAAA,MAEC,SAAS;AAAA,MACT,YAAY;AAAA,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQD;AAAA,EACA;AAAA;AAAA,EAED,aAAa;AAAA,IACZ,SAAS;AAAA,IACT,QAAQ;AAAA,MACP,eAAe;AAAA,IACf;AAAA,EACD;AAAA,EACD,YAAY;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,MACP,eAAe;AAAA,IACf;AAAA,EACD;AAAA,EACD,eAAe;AAChB;"}