{"version":3,"file":"kumir.js","sources":["../../../src/prism/languages/kumir.js"],"sourcesContent":["import { languages } from '../core.js';\r\nimport { re } from '../utils/shared.js';\r\n\r\n/** Regular expression for characters that are not allowed in identifiers. */\r\nvar nonId = ['\\\\s\\0-\\x1f\"-/:-?[-^`{-~'];\r\n\r\nlanguages.kum = languages.kumir = {\r\n\t'comment': /\\|.*/,\r\n\r\n\t'prolog': {\r\n\t\tpattern: /#.*/g,\r\n\t\tgreedy: true\r\n\t},\r\n\r\n\t'string': {\r\n\t\tpattern: /\"[^\\n\"]*\"|'[^\\n']*'/g,\r\n\t\tgreedy: true\r\n\t},\r\n\r\n\t'boolean': {\r\n\t\tpattern: re(/(^|[<0>])(?:да|нет)(?![^<0>])/.source, nonId),\r\n\t\tlookbehind: true\r\n\t},\r\n\r\n\t'operator-word': {\r\n\t\tpattern: re(/(^|[<0>])(?:и|или|не)(?![^<0>])/.source, nonId),\r\n\t\tlookbehind: true,\r\n\t\talias: 'keyword'\r\n\t},\r\n\r\n\t'system-variable': {\r\n\t\tpattern: re(/(^|[<0>])знач(?![^<0>])/.source, nonId),\r\n\t\tlookbehind: true,\r\n\t\talias: 'keyword'\r\n\t},\r\n\r\n\t'type': [\r\n\t\t{\r\n\t\t\tpattern: re(/(^|[<0>])(?:вещ|лит|лог|сим|цел)(?: *таб)?(?![^<0>])/.source, nonId),\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'builtin'\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: re(/(^|[<0>])(?:компл|сканкод|файл|цвет)(?![^<0>])/.source, nonId),\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'important'\r\n\t\t}\r\n\t],\r\n\r\n\t/**\r\n\t * Should be performed after searching for type names because of \"таб\".\r\n\t * \"таб\" is a reserved word, but never used without a preceding type name.\r\n\t * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\r\n\t */\r\n\t'keyword': {\r\n\t\tpattern: re(/(^|[<0>])(?:алг|арг(?: *рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?: +|_)исп)?|кц(?:(?: +|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?![^<0>])/.source, nonId),\r\n\t\tlookbehind: true\r\n\t},\r\n\r\n\t/** Should be performed after searching for reserved words. */\r\n\t'name': {\r\n\t\t// eslint-disable-next-line regexp/no-super-linear-backtracking\r\n\t\tpattern: re(/(^|[<0>])[^\\d<0>][^<0>]*(?: +[^<0>]+)*(?![^<0>])/.source, nonId),\r\n\t\tlookbehind: true\r\n\t},\r\n\r\n\t/** Should be performed after searching for names. */\r\n\t'number': {\r\n\t\tpattern: re(/(^|[<0>])(?:\\B\\$[a-f\\d]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?![^<0>])/.source, nonId, 'i'),\r\n\t\tlookbehind: true\r\n\t},\r\n\r\n\t/** Should be performed after searching for words. */\r\n\t'punctuation': /:=|[()[\\],:;]/,\r\n\r\n\t/**\r\n\t * Should be performed after searching for\r\n\t * - numeric constants (because of \"+\" and \"-\");\r\n\t * - punctuation marks (because of \":=\" and \"=\").\r\n\t */\r\n\t'operator-char': {\r\n\t\tpattern: /\\*\\*?|<>|>=?|<=?|[=/+-]/,\r\n\t\talias: 'operator'\r\n\t}\r\n};\r\n"],"names":[],"mappings":";;AAIA,IAAI,QAAQ,CAAC,sBAAyB;AAEtC,UAAU,MAAM,UAAU,QAAQ;AAAA,EACjC,WAAW;AAAA,EAEX,UAAU;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EAED,UAAU;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA,EAED,WAAW;AAAA,IACV,SAAS,GAAG,iCAAwC,KAAK;AAAA,IACzD,YAAY;AAAA,EACZ;AAAA,EAED,iBAAiB;AAAA,IAChB,SAAS,GAAG,mCAA0C,KAAK;AAAA,IAC3D,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EAED,mBAAmB;AAAA,IAClB,SAAS,GAAG,2BAAkC,KAAK;AAAA,IACnD,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EAED,QAAQ;AAAA,IACP;AAAA,MACC,SAAS,GAAG,wDAA+D,KAAK;AAAA,MAChF,YAAY;AAAA,MACZ,OAAO;AAAA,IACP;AAAA,IACD;AAAA,MACC,SAAS,GAAG,kDAAyD,KAAK;AAAA,MAC1E,YAAY;AAAA,MACZ,OAAO;AAAA,IACP;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,WAAW;AAAA,IACV,SAAS,GAAG,oOAA2O,KAAK;AAAA,IAC5P,YAAY;AAAA,EACZ;AAAA;AAAA,EAGD,QAAQ;AAAA;AAAA,IAEP,SAAS,GAAG,qDAA2D,KAAK;AAAA,IAC5E,YAAY;AAAA,EACZ;AAAA;AAAA,EAGD,UAAU;AAAA,IACT,SAAS,GAAG,+FAA0F,OAAO,GAAG;AAAA,IAChH,YAAY;AAAA,EACZ;AAAA;AAAA,EAGD,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOf,iBAAiB;AAAA,IAChB,SAAS;AAAA,IACT,OAAO;AAAA,EACP;AACF;"}