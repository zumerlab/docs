{"version":3,"file":"markdown.js","sources":["../../../src/prism/languages/markdown.js"],"sourcesContent":["import { languages, tokenizeText, tokenize, withoutTokenizer } from '../core.js';\r\nimport { clone, insertBefore } from '../utils/language.js';\r\nimport { re, replace } from '../utils/shared.js';\r\nimport './markup.js';\r\n\r\n// Allow only one line break\r\nvar inner = [/(?:\\\\.|[^\\\\\\n]|\\n(?!\\n))/.source];\r\n\r\n/**\r\n * This function is intended for the creation of the bold or italic pattern.\r\n *\r\n * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\r\n *\r\n * _Note:_ Keep in mind that this adds a capturing group.\r\n *\r\n * @param {string} pattern\r\n * @returns {RegExp}\r\n */\r\nvar createInline = pattern => re(`((?:^|[^\\\\\\\\])(?:\\\\\\\\\\\\\\\\)*)(?:${pattern})`, inner, 'g');\r\nvar tableCell = /(?:\\\\.|``(?:[^\\n`]|`(?!`))+``|`[^\\n`]+`|[^\\\\\\n|`])+/;\r\nvar tableRow = replace(/\\|?<0>(?:\\|<0>)+\\|?(?:\\n|(?![\\s\\S]))/.source, [tableCell.source]);\r\nvar tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?\\n/.source;\r\nvar markdown = languages.md = languages.markdown = clone(languages.html);\r\n\r\ninsertBefore(markdown, 'prolog', {\r\n\t'front-matter-block': {\r\n\t\tpattern: /(^(?:\\s*\\n)?)---(?!.)[\\s\\S]*?\\n---(?!.)/g,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'punctuation': /^---|---$/,\r\n\t\t\t'front-matter': {\r\n\t\t\t\tpattern: /\\S(?:[\\s\\S]*\\S)?/,\r\n\t\t\t\talias: 'language-yaml',\r\n\t\t\t\tinside: 'yaml'\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t'blockquote': {\r\n\t\t// > ...\r\n\t\tpattern: /^>(?:[ \\t]*>)*/m,\r\n\t\talias: 'punctuation'\r\n\t},\r\n\t'table': {\r\n\t\tpattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\r\n\t\tinside: {\r\n\t\t\t'table-header-row': {\r\n\t\t\t\tpattern: /^.+/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'table-header': {\r\n\t\t\t\t\t\tpattern: tableCell,\r\n\t\t\t\t\t\talias: 'important',\r\n\t\t\t\t\t\tinside: markdown\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'punctuation': /\\|/\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'table-data-rows': {\r\n\t\t\t\tpattern: /(.+\\n)[\\s\\S]+/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'table-data': {\r\n\t\t\t\t\t\tpattern: tableCell,\r\n\t\t\t\t\t\tinside: markdown\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'punctuation': /\\|/\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'table-line': {\r\n\t\t\t\tpattern: /.+/,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'punctuation': /\\S+/\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t}\r\n\t},\r\n\t'code': [\r\n\t\t{\r\n\t\t\t// Prefixed by 4 spaces or 1 tab and preceded by an empty line\r\n\t\t\tpattern: /(^[ \\t]*\\n)(?:    |\\t).+(?:\\n(?:    |\\t).+)*/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'keyword'\r\n\t\t},\r\n\t\t{\r\n\t\t\t// ```optional language\r\n\t\t\t// code block\r\n\t\t\t// ```\r\n\t\t\tpattern: /^(```+)[^`][\\s\\S]*?^\\1`*$/mg,\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'punctuation': /^`+|`+$/,\r\n\t\t\t\t'code-language': /^.+/,\r\n\t\t\t\t'code-block': /(?!^)[\\s\\S]+(?=\\n)/,\r\n\t\t\t\t[tokenize](code, grammar) {\r\n\t\t\t\t\tvar tokens = withoutTokenizer(code, grammar);\r\n\t\t\t\t\tvar language;\r\n\r\n\t\t\t\t\tif (tokens[5]) {\r\n\t\t\t\t\t\tlanguage = (/[a-z][\\w-]*/i.exec(\r\n\t\t\t\t\t\t\ttokens[1].content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp')\r\n\t\t\t\t\t\t) || [''])[0].toLowerCase();\r\n\r\n\t\t\t\t\t\ttokens[3].alias = 'language-' + language;\r\n\t\r\n\t\t\t\t\t\tif (grammar = languages[language]) {\r\n\t\t\t\t\t\t\ttokens[3].content = tokenizeText(tokens[3].content, grammar);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn tokens;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\t'title': [\r\n\t\t{\r\n\t\t\t// title 1\r\n\t\t\t// =======\r\n\r\n\t\t\t// title 2\r\n\t\t\t// -------\r\n\t\t\tpattern: /\\S.*\\n(?:==+|--+)(?=[ \\t]*$)/m,\r\n\t\t\talias: 'important',\r\n\t\t\tinside: {\r\n\t\t\t\tpunctuation: /=+$|-+$/\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t// # title 1\r\n\t\t\t// ###### title 6\r\n\t\t\tpattern: /(^\\s*)#.+/m,\r\n\t\t\tlookbehind: true,\r\n\t\t\talias: 'important',\r\n\t\t\tinside: {\r\n\t\t\t\tpunctuation: /^#+|#+$/\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\t'hr': {\r\n\t\t// ***\r\n\t\t// ---\r\n\t\t// * * *\r\n\t\t// -----------\r\n\t\tpattern: /(^\\s*)([*-])(?:[ \\t]*\\2){2,}(?=\\s*$)/m,\r\n\t\tlookbehind: true,\r\n\t\talias: 'punctuation'\r\n\t},\r\n\t'list': {\r\n\t\t// * item\r\n\t\t// + item\r\n\t\t// - item\r\n\t\t// 1. item\r\n\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[ \\t].)/m,\r\n\t\tlookbehind: true,\r\n\t\talias: 'punctuation'\r\n\t},\r\n\t'url-reference': {\r\n\t\t// [id]: http://example.com \"Optional title\"\r\n\t\t// [id]: http://example.com 'Optional title'\r\n\t\t// [id]: http://example.com (Optional title)\r\n\t\t// [id]: <http://example.com> \"Optional title\"\r\n\t\tpattern: /!?\\[[^\\]]+\\]:[ \\t]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[ \\t]+(?:\"(?:\\\\.|[^\\\\\"])*\"|'(?:\\\\.|[^\\\\'])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\r\n\t\tinside: {\r\n\t\t\t'variable': {\r\n\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t'string': /(?:\"(?:\\\\.|[^\\\\\"])*\"|'(?:\\\\.|[^\\\\'])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\r\n\t\t\t'punctuation': /^[[\\]!:]|<|>/\r\n\t\t},\r\n\t\talias: 'url'\r\n\t},\r\n\t'bold': {\r\n\t\t// **strong**\r\n\t\t// __strong__\r\n\r\n\t\t// allow one nested instance of italic text using the same delimiter\r\n\t\tpattern: createInline(/\\b__(?:(?!_)<0>|_(?:(?!_)<0>)+_)+__\\b|\\*\\*(?:(?!\\*)<0>|\\*(?:(?!\\*)<0>)+\\*)+\\*\\*/.source),\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'content': {\r\n\t\t\t\tpattern: /(^..)[\\s\\S]+(?=..)/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {} // see below\r\n\t\t\t},\r\n\t\t\t'punctuation': /../\r\n\t\t}\r\n\t},\r\n\t'italic': {\r\n\t\t// *em*\r\n\t\t// _em_\r\n\r\n\t\t// allow one nested instance of bold text using the same delimiter\r\n\t\tpattern: createInline(/\\b_(?:(?!_)<0>|__(?:(?!_)<0>)+__)+_\\b|\\*(?:(?!\\*)<0>|\\*\\*(?:(?!\\*)<0>)+\\*\\*)+\\*/.source),\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'content': {\r\n\t\t\t\tpattern: /(?!^)[\\s\\S]+(?=.)/,\r\n\t\t\t\tinside: {} // see below\r\n\t\t\t},\r\n\t\t\t'punctuation': /./\r\n\t\t}\r\n\t},\r\n\t'strike': {\r\n\t\t// ~~strike through~~\r\n\t\t// ~strike~\r\n\t\t// eslint-disable-next-line regexp/strict\r\n\t\tpattern: createInline(/(~~?)(?:(?!~)<0>)+\\2/.source),\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'punctuation': /^~~?|~~?$/,\r\n\t\t\t'content': {\r\n\t\t\t\tpattern: /[\\s\\S]+/,\r\n\t\t\t\tinside: {} // see below\r\n\t\t\t},\r\n\t\t}\r\n\t},\r\n\t'code-snippet': {\r\n\t\t// `code`\r\n\t\t// ``code``\r\n\t\tpattern: /(^|[^\\\\`])(?:``[^\\n`]+(?:`[^\\n`]+)*``(?!`)|`[^\\n`]+`(?!`))/g,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\talias: 'code keyword'\r\n\t},\r\n\t'url': {\r\n\t\t// [example](http://example.com \"Optional title\")\r\n\t\t// [example][id]\r\n\t\t// [example] [id]\r\n\t\tpattern: createInline(/!?\\[(?:(?!\\])<0>)+\\](?:\\([^\\s)]+(?:[ \\t]+\"(?:\\\\.|[^\\\\\"])*\")?\\)|[ \\t]?\\[(?:(?!\\])<0>)+\\])/.source),\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'operator': /^!/,\r\n\t\t\t'content': {\r\n\t\t\t\tpattern: /(^\\[)[^\\]]+(?=\\])/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {} // see below\r\n\t\t\t},\r\n\t\t\t'variable': {\r\n\t\t\t\tpattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t'url': {\r\n\t\t\t\tpattern: /(^\\]\\()[^\\s)]+/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t'string': {\r\n\t\t\t\tpattern: /(^[ \\t]+)\"(?:\\\\.|[^\\\\\"])*\"(?=\\)$)/,\r\n\t\t\t\tlookbehind: true\r\n\t\t\t},\r\n\t\t\t'markup-bracket': markdown['markup-bracket']\r\n\t\t}\r\n\t}\r\n});\r\n\r\n['url', 'bold', 'italic', 'strike'].forEach(token => {\r\n\t['url', 'bold', 'italic', 'strike', 'code-snippet', 'markup-bracket'].forEach(inside => {\r\n\t\tif (token != inside) {\r\n\t\t\tmarkdown[token].inside.content.inside[inside] = markdown[inside];\r\n\t\t}\r\n\t});\r\n});\r\n"],"names":[],"mappings":"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"}