{"version":3,"file":"javascript.js","sources":["../../../src/prism/languages/javascript.js"],"sourcesContent":["import { languages, rest } from '../core.js';\r\nimport { boolean, clikeComment, clikeString } from '../utils/patterns.js';\r\n\r\nvar js = {};\r\n\r\nlanguages.js = languages.javascript = Object.assign(js, {\r\n\t'doc-comment': {\r\n\t\tpattern: /\\/\\*\\*(?!\\/)[\\s\\S]*?(?:\\*\\/|$)/g,\r\n\t\tgreedy: true,\r\n\t\talias: 'comment',\r\n\t\tinside: 'jsdoc'\r\n\t},\r\n\t'comment': clikeComment(),\r\n\t'hashbang': {\r\n\t\tpattern: /^#!.*/g,\r\n\t\tgreedy: true,\r\n\t\talias: 'comment'\r\n\t},\r\n\t'template-string': {\r\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})*\\}|(?!\\$\\{)[^\\\\`])*`/g,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'template-punctuation': {\r\n\t\t\t\tpattern: /^`|`$/,\r\n\t\t\t\talias: 'string'\r\n\t\t\t},\r\n\t\t\t'interpolation': {\r\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})*\\}/,\r\n\t\t\t\tlookbehind: true,\r\n\t\t\t\tinside: {\r\n\t\t\t\t\t'interpolation-punctuation': {\r\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\r\n\t\t\t\t\t\talias: 'punctuation'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t[rest]: js\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'string': /[\\s\\S]+/\r\n\t\t}\r\n\t},\r\n\t'string-property': {\r\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\[\\s\\S]|(?!\\2)[^\\\\\\n])*\\2(?=\\s*:)/mg,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\talias: 'property'\r\n\t},\r\n\t'string': clikeString(),\r\n\t'regex': {\r\n\t\tpattern: /((?:^|[^$\\w\\xa0-\\uffff\"'`.)\\]\\s]|\\b(?:return|yield))\\s*)\\/(?:(?:\\[(?:\\\\.|[^\\\\\\n\\]])*\\]|\\\\.|[^\\\\\\n/[])+\\/[dgimyus]{0,7}|(?:\\[(?:\\\\.|[^\\\\\\n[\\]]|\\[(?:\\\\.|[^\\\\\\n[\\]]|\\[(?:\\\\.|[^\\\\\\n[\\]])*\\])*\\])*\\]|\\\\.|[^\\\\\\n/[])+\\/[dgimyus]{0,7}v[dgimyus]{0,7})(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?!\\/\\*|[^()[\\]{}.,:;?`\\n%&|^!=<>/*+-]))/g,\r\n\t\tlookbehind: true,\r\n\t\tgreedy: true,\r\n\t\tinside: {\r\n\t\t\t'regex-flags': /\\w+$/,\r\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\r\n\t\t\t'regex-source': {\r\n\t\t\t\tpattern: /.+/,\r\n\t\t\t\talias: 'language-regex',\r\n\t\t\t\tinside: 'regex'\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t'class-name': [\r\n\t\t{\r\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)(?!\\d)(?:(?!\\s)[$\\w.\\xa0-\\uffff])+/,\r\n\t\t\tlookbehind: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'punctuation': /\\./\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^$\\w\\xa0-\\uffff]|\\s)(?![a-z\\d])(?:(?!\\s)[$\\w\\xa0-\\uffff])+(?=\\.(?:constructor|prototype)\\b)/,\r\n\t\t\tlookbehind: true\r\n\t\t}\r\n\t],\r\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\r\n\t'function-variable': {\r\n\t\tpattern: /#?(?!\\d)(?:(?!\\s)[$\\w\\xa0-\\uffff])+(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^)]*\\))*\\)|(?!\\d)(?:(?!\\s)[$\\w\\xa0-\\uffff])+)\\s*=>))/,\r\n\t\talias: 'function',\r\n\t\tinside: {\r\n\t\t\t'maybe-class-name': /^[A-Z].*/\r\n\t\t}\r\n\t},\r\n\t'parameter': [\r\n\t\t/(function(?:\\s+(?!\\d)(?:(?!\\s)[$\\w\\xa0-\\uffff])+)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\r\n\t\t/(^|[^$\\w\\xa0-\\uffff]|\\s)(?!\\d)(?:(?!\\s)[$\\w\\xa0-\\uffff])+(?=\\s*=>)/,\r\n\t\t/(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\r\n\t\t/((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|continue|default|do|else|finally|for|if|return|switch|throw|try|while|yield|class|const|debugger|delete|enum|extends|function|[gs]et|export|from|import|implements|in|instanceof|interface|let|new|null|of|package|private|protected|public|static|super|this|typeof|undefined|var|void|with)(?![$\\w\\xa0-\\uffff]))(?:(?!\\d)(?:(?!\\s)[$\\w\\xa0-\\uffff])+\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/\r\n\t].map(pattern => ({\r\n\t\tpattern,\r\n\t\tlookbehind: true,\r\n\t\tinside: js\r\n\t})),\r\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/,\r\n\t'keyword': [\r\n\t\t{\r\n\t\t\tpattern: /(^|[^.]|\\.{3}\\s*)\\b(?:as|assert(?=\\s*\\{)|export|from(?!\\s*[^\\s\"'])|import)\\b/,\r\n\t\t\talias: 'module',\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^.]|\\.{3}\\s*)\\b(?:await|break|case|catch|continue|default|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\r\n\t\t\talias: 'control-flow',\r\n\t\t\tlookbehind: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tpattern: /(^|[^.]|\\.{3}\\s*)\\b(?:async(?!\\s*[^\\s($\\w\\xa0-\\uffff])|class|const|debugger|delete|enum|extends|function|[gs]et(?!\\s*[^\\s#[$\\w\\xa0-\\uffff])|implements|in|instanceof|interface|let|new|null|of|package|private|protected|public|static|super|this|typeof|undefined|var|void|with)\\b/,\r\n\t\t\tlookbehind: true\r\n\t\t}\r\n\t],\r\n\t'boolean': boolean,\r\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\r\n\t'function': {\r\n\t\tpattern: /#?(?!\\d)(?:(?!\\s)[$\\w\\xa0-\\uffff])+(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\r\n\t\tinside: {\r\n\t\t\t'maybe-class-name': /^[A-Z].*/\r\n\t\t}\r\n\t},\r\n\t'number': {\r\n\t\tpattern: /(^|[^$\\w])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][a-fA-F\\d]+(?:_[a-fA-F\\d]+)*n?|\\d+(?:_\\d+)*n|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?)(?![$\\w])/,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'literal-property': {\r\n\t\tpattern: /([\\n,{][ \\t]*)(?!\\d)(?:(?!\\s)[$\\w\\xa0-\\uffff])+(?=\\s*:)/,\r\n\t\tlookbehind: true,\r\n\t\talias: 'property'\r\n\t},\r\n\t'operator': [\r\n\t\t{\r\n\t\t\tpattern: /=>/,\r\n\t\t\talias: 'arrow'\r\n\t\t},\r\n\t\t/--|\\+\\+|(?:\\*\\*|&&|\\|\\||[!=]=|>>>?|<<|[%&|^!=<>/*+-]|\\?\\?)=?|\\.{3}|\\?(?!\\.)|~|:/\r\n\t],\r\n\t'property-access': {\r\n\t\tpattern: /(\\.\\s*)#?(?!\\d)(?:(?!\\s)[$\\w\\xa0-\\uffff])+/,\r\n\t\tlookbehind: true,\r\n\t\tinside: {\r\n\t\t\t'maybe-class-name': /^[A-Z].*/\r\n\t\t}\r\n\t},\r\n\t'maybe-class-name': {\r\n\t\tpattern: /(^|[^$\\w\\xa0-\\uffff])[A-Z][$\\w\\xa0-\\uffff]+/,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'punctuation': /\\?\\.|[()[\\]{}.,:;]/\r\n});\r\n"],"names":[],"mappings":";;AAGA,IAAI,KAAK,CAAA;AAET,UAAU,KAAK,UAAU,aAAa,OAAO,OAAO,IAAI;AAAA,EACvD,eAAe;AAAA,IACd,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,EACR;AAAA,EACD,WAAW,aAAc;AAAA,EACzB,YAAY;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,EACP;AAAA,EACD,mBAAmB;AAAA,IAClB,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,wBAAwB;AAAA,QACvB,SAAS;AAAA,QACT,OAAO;AAAA,MACP;AAAA,MACD,iBAAiB;AAAA,QAChB,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,QAAQ;AAAA,UACP,6BAA6B;AAAA,YAC5B,SAAS;AAAA,YACT,OAAO;AAAA,UACP;AAAA,UACD,CAAC,IAAI,GAAG;AAAA,QACR;AAAA,MACD;AAAA,MACD,UAAU;AAAA,IACV;AAAA,EACD;AAAA,EACD,mBAAmB;AAAA,IAClB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,OAAO;AAAA,EACP;AAAA,EACD,UAAU,YAAa;AAAA,EACvB,SAAS;AAAA,IACR,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,MACP,eAAe;AAAA,MACf,mBAAmB;AAAA,MACnB,gBAAgB;AAAA,QACf,SAAS;AAAA,QACT,OAAO;AAAA,QACP,QAAQ;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EACD,cAAc;AAAA,IACb;AAAA,MACC,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,QAAQ;AAAA,QACP,eAAe;AAAA,MACf;AAAA,IACD;AAAA,IACD;AAAA,MACC,SAAS;AAAA,MACT,YAAY;AAAA,IACZ;AAAA,EACD;AAAA;AAAA,EAED,qBAAqB;AAAA,IACpB,SAAS;AAAA,IACT,OAAO;AAAA,IACP,QAAQ;AAAA,MACP,oBAAoB;AAAA,IACpB;AAAA,EACD;AAAA,EACD,aAAa;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,EAAG,IAAI,cAAY;AAAA,IACjB;AAAA,IACA,YAAY;AAAA,IACZ,QAAQ;AAAA,EACV,EAAG;AAAA,EACF,YAAY;AAAA,EACZ,WAAW;AAAA,IACV;AAAA,MACC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,YAAY;AAAA,IACZ;AAAA,IACD;AAAA,MACC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,YAAY;AAAA,IACZ;AAAA,IACD;AAAA,MACC,SAAS;AAAA,MACT,YAAY;AAAA,IACZ;AAAA,EACD;AAAA,EACD,WAAW;AAAA;AAAA,EAEX,YAAY;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,MACP,oBAAoB;AAAA,IACpB;AAAA,EACD;AAAA,EACD,UAAU;AAAA,IACT,SAAS;AAAA,IACT,YAAY;AAAA,EACZ;AAAA,EACD,oBAAoB;AAAA,IACnB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,OAAO;AAAA,EACP;AAAA,EACD,YAAY;AAAA,IACX;AAAA,MACC,SAAS;AAAA,MACT,OAAO;AAAA,IACP;AAAA,IACD;AAAA,EACA;AAAA,EACD,mBAAmB;AAAA,IAClB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,MACP,oBAAoB;AAAA,IACpB;AAAA,EACD;AAAA,EACD,oBAAoB;AAAA,IACnB,SAAS;AAAA,IACT,YAAY;AAAA,EACZ;AAAA,EACD,eAAe;AAChB,CAAC;"}