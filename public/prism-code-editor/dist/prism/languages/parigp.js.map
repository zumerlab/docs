{"version":3,"file":"parigp.js","sources":["../../../src/prism/languages/parigp.js"],"sourcesContent":["import { languages } from '../core.js';\r\n\r\nlanguages.parigp = {\r\n\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\r\n\t'string': {\r\n\t\tpattern: /\"(?:\\\\.|[^\\\\\\n\"])*\"/g,\r\n\t\tgreedy: true\r\n\t},\r\n\t// PARI/GP does not care about white spaces at all\r\n\t// so let's process the keywords to build an appropriate regexp\r\n\t// (e.g. \"b *r *e *a *k\", etc.)\r\n\t'keyword': RegExp('\\\\b(?:' +\r\n\t\t'breakpoint|break|dbg_down|dbg_err|dbg_up|dbg_x|forcomposite|fordiv|forell|forpart|forprime|forstep|forsubgroup|forvec|for|iferr|if|local|my|next|return|until|while'.replace(/\\w/g, '$& *') +\r\n\t\t')\\\\b'\r\n\t),\r\n\t'function': /\\b\\w(?:[\\w ]*\\w)?(?= *\\()/,\r\n\t'number': {\r\n\t\t// The lookbehind and the negative lookahead prevent from breaking the .. operator\r\n\t\tpattern: /(\\. *\\. *)?(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,\r\n\t\tlookbehind: true\r\n\t},\r\n\t'operator': /\\. *\\.|[*/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\r\n\t'punctuation': /[()[\\]{}.,:;|]/\r\n};\r\n"],"names":[],"mappings":";AAEA,UAAU,SAAS;AAAA,EAClB,WAAW;AAAA,EACX,UAAU;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAID,WAAW;AAAA,IAAO,WACjB,sKAAsK,QAAQ,OAAO,MAAM,IAC3L;AAAA,EACA;AAAA,EACD,YAAY;AAAA,EACZ,UAAU;AAAA;AAAA,IAET,SAAS;AAAA,IACT,YAAY;AAAA,EACZ;AAAA,EACD,YAAY;AAAA,EACZ,eAAe;AAChB;"}