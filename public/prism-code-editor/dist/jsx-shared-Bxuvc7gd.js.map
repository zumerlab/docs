{"version":3,"file":"jsx-shared-Bxuvc7gd.js","sources":["../src/prism/utils/jsx-shared.js"],"sourcesContent":["import { Token, languages, tokenize, withoutTokenizer } from '../core.js';\r\nimport { clone, insertBefore } from './language.js';\r\nimport { replace, re } from './shared.js';\r\n\r\nvar space = /\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\//.source;\r\nvar braces = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})*\\}/.source;\r\nvar spread = replace(/\\{<0>*\\.{3}(?:[^{}]|<1>)*\\}/.source, [space, braces]);\r\n\r\nvar isText = token => token && (!token.type || token.type == 'plain-text');\r\n\r\n/**\r\n * @param {(string | Token)[]} tokens\r\n * @param {string} code\r\n * @param {number} position\r\n */\r\nvar walkTokens = (tokens, code, position) => {\r\n\tfor (var i = 0, openedTags = [], l = 0; i < tokens.length; i++) {\r\n\t\tvar token = tokens[i];\r\n\t\tvar length = token.length;\r\n\t\tvar type = token.type;\r\n\t\tvar notTagNorBrace = !type;\r\n\t\tvar last, tag, start, plainText, content;\r\n\r\n\t\tif (type) {\r\n\t\t\tcontent = token.content;\r\n\t\t\tif (type == 'tag') {\r\n\t\t\t\t// We found a tag, now find its kind\r\n\t\t\t\tstart = content[0].length;\r\n\t\t\t\ttag = content[2] ? code.substr(position + start, content[1].length) : '';\r\n\t\t\t\tif (start > 1) {\r\n\t\t\t\t\t// Closing tag\r\n\t\t\t\t\tif (l && openedTags[l - 1][0] == tag) {\r\n\t\t\t\t\t\t// Pop matching opening tag\r\n\t\t\t\t\t\tl--;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (content[content.length - 1].length < 2) {\r\n\t\t\t\t\t\t// Opening tag\r\n\t\t\t\t\t\topenedTags[l++] = [tag, 0];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (l && type == 'punctuation') {\r\n\t\t\t\tlast = openedTags[l - 1];\r\n\t\t\t\tif (content == '{') last[1]++;\r\n\t\t\t\telse if (last[1] && content == '}') last[1]--;\r\n\t\t\t\telse {\r\n\t\t\t\t\tnotTagNorBrace = !\"}()[]\".includes(content);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnotTagNorBrace = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (notTagNorBrace && l && !openedTags[l - 1][1]) {\r\n\t\t\t// Here we are inside a tag, and not inside a JSX context.\r\n\t\t\t// That's plain text: drop any tokens matched.\r\n\t\t\tstart = position;\r\n\r\n\t\t\t// And merge text with adjacent text\r\n\t\t\tif (isText(tokens[i + 1])) {\r\n\t\t\t\tlength += tokens[i + 1].length;\r\n\t\t\t\ttokens.splice(i + 1, 1);\r\n\t\t\t}\r\n\t\t\tif (isText(tokens[i - 1])) {\r\n\t\t\t\tstart -= tokens[--i].length;\r\n\t\t\t\ttokens.splice(i, 1);\r\n\t\t\t}\r\n\r\n\t\t\tplainText = code.slice(start, position + length);\r\n\t\t\ttokens[i] = new Token('plain-text', plainText, plainText);\r\n\t\t}\r\n\t\tposition += length;\r\n\t}\r\n\treturn tokens;\r\n};\r\n\r\n/**\r\n * Adds JSX tags along with the custom tokenizer to the grammar\r\n * @param {any} grammar\r\n * @param {string} name\r\n */\r\nvar addJsxTag = (grammar, name) => {\r\n\tinsertBefore(languages[name] = grammar = clone(grammar), 'regex', {\r\n\t\t'tag': {\r\n\t\t\tpattern: re(\r\n\t\t\t\t/<\\/?(?:(?!\\d)[^\\s/=><%]+(?:<0>(?:<0>*(?:[^\\s<>/={*]+(?:<0>*=<0>*(?!\\s)(?:\"[^\"]*\"|'[^']*'|<1>)?|(?=[\\s/>]))|<2>))+)?<0>*\\/?)?>/.source, [space, braces, spread], 'g'\r\n\t\t\t),\r\n\t\t\tgreedy: true,\r\n\t\t\tinside: {\r\n\t\t\t\t'punctuation': /^<\\/?|\\/?>$/,\r\n\t\t\t\t'tag': {\r\n\t\t\t\t\tpattern: /^[^\\s/]+/,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'namespace': /^[^:]+:/,\r\n\t\t\t\t\t\t'class-name': /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'script': {\r\n\t\t\t\t\t// Allow for two levels of nesting\r\n\t\t\t\t\tpattern: re(/(=<0>*)<1>/.source, [space, braces]),\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\talias: name = 'language-' + name,\r\n\t\t\t\t\tinside: grammar\r\n\t\t\t\t},\r\n\t\t\t\t'spread': {\r\n\t\t\t\t\tpattern: RegExp(spread),\r\n\t\t\t\t\talias: name,\r\n\t\t\t\t\tinside: grammar\r\n\t\t\t\t},\r\n\t\t\t\t'attr-value': {\r\n\t\t\t\t\tpattern: re(/(=<0>*)(?:\"[^\"]*\"|'[^']*')/.source, [space]),\r\n\t\t\t\t\tlookbehind: true,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'punctuation': /^[\"']|[\"']$/\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t'comment': grammar['comment'],\r\n\t\t\t\t'attr-equals': /=/,\r\n\t\t\t\t'attr-name': {\r\n\t\t\t\t\tpattern: /\\S+/,\r\n\t\t\t\t\tinside: {\r\n\t\t\t\t\t\t'namespace': /^[^:]+:/\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tgrammar[tokenize] = (code, grammar) => walkTokens(withoutTokenizer(code, grammar), code, 0);\r\n}\r\n\r\nexport { addJsxTag, space, braces, spread }\r\n"],"names":["grammar"],"mappings":"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"}