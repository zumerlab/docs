{"version":3,"file":"index.js","sources":["../../../src/extensions/autocomplete/tooltip.ts","../../../src/extensions/autocomplete/filter.ts"],"sourcesContent":["import { BasicExtension, InputSelection } from \"../../index.js\"\r\nimport { addTextareaListener, createTemplate, preventDefault } from \"../../core.js\"\r\nimport { addTooltip } from \"../../tooltips.js\"\r\nimport {\r\n\tgetLanguage,\r\n\tgetLineBefore,\r\n\tgetModifierCode,\r\n\tinsertText,\r\n\tprevSelection,\r\n} from \"../../utils/index.js\"\r\nimport { Cursor, cursorPosition } from \"../cursor.js\"\r\nimport { AutoCompleteConfig, Completion, CompletionContext, CompletionDefinition } from \"./types.js\"\r\nimport { searchTemplate } from \"../search/search.js\"\r\nimport { updateMatched, updateNode } from \"./utils.js\"\r\nimport { getStyleValue } from \"../../utils/local.js\"\r\n\r\nlet count = 0\r\n\r\nconst template = createTemplate(\"<div class=pce-ac-tooltip><ul role=listbox>\")\r\nconst rowTemplate = createTemplate(\r\n\t\"<li class=pce-ac-row role=option><div></div><div> </div><div class=pce-ac-details> \",\r\n)\r\n\r\nconst map: Record<string, CompletionDefinition<any>> = {}\r\n\r\n/**\r\n * Registers completion sources for a set of languages.\r\n * If any of the languages already have completion sources, they're overridden.\r\n * @param langs Array of languages you want the completions to apply for.\r\n * @param definition Defines the completion sources for the languages along with additional\r\n * properties on the context passed to the completion sources.\r\n */\r\nconst registerCompletions = <T extends object>(\r\n\tlangs: string[],\r\n\tdefinition: CompletionDefinition<T>,\r\n) => {\r\n\tlangs.forEach(lang => (map[lang] = definition))\r\n}\r\n\r\n/**\r\n * Extension adding basic autocomplete to an editor. For autocompletion to work, you need to\r\n * {@link registerCompletions} for specific languages.\r\n *\r\n * @param config Object used to configure the extension. The `filter` property is required.\r\n *\r\n * Requires the {@link cursorPosition} extension to work.\r\n *\r\n * Requires styling from `prism-code-editor/autocomplete.css`. Also requires a stylesheet\r\n * for icons. `prism-code-editor/autocomplete-icons.css` adds some icons from VSCode, but\r\n * you can define your own icons instead.\r\n *\r\n * @see {@link Completion.icon} for how to style your own icons.\r\n */\r\nconst autoComplete =\r\n\t(config: AutoCompleteConfig): BasicExtension =>\r\n\t(editor, options) => {\r\n\t\tlet isOpen: boolean\r\n\t\tlet shouldOpen: boolean\r\n\t\tlet currentOptions: [number, number[], number, number, Completion][]\r\n\t\tlet numOptions: number\r\n\t\tlet activeIndex: number\r\n\t\tlet active: HTMLLIElement | undefined\r\n\t\tlet pos: number\r\n\t\tlet offset: number\r\n\t\tlet rowHeight: number\r\n\t\tlet cursor: Cursor | undefined\r\n\t\tlet stops: null | number[]\r\n\t\tlet activeStop: number\r\n\t\tlet currentSelection: InputSelection\r\n\t\tlet prevLength: number\r\n\t\tlet isDeleteForwards: boolean\r\n\r\n\t\tconst windowSize = 13\r\n\t\tconst textarea = editor.textarea\r\n\t\tconst getSelection = editor.getSelection\r\n\t\tconst tooltip = template()\r\n\t\tconst tabStopsContainer = searchTemplate()\r\n\t\tconst [show, _hide] = addTooltip(editor, tooltip)\r\n\t\tconst list = tooltip.firstChild as HTMLUListElement\r\n\t\tconst id = (list.id = \"pce-ac-\" + count++)\r\n\t\tconst rows = list.children as HTMLCollectionOf<HTMLLIElement>\r\n\t\tconst add = editor.addListener\r\n\t\tconst prevIcons: string[] = []\r\n\t\tconst hide = () => {\r\n\t\t\tif (isOpen) {\r\n\t\t\t\t_hide()\r\n\t\t\t\ttextarea.removeAttribute(\"aria-haspopup\")\r\n\t\t\t\ttextarea.removeAttribute(\"aria-activedescendant\")\r\n\t\t\t\tisOpen = false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst setRowHeight = () => {\r\n\t\t\trowHeight = getStyleValue(rows[0], \"height\")\r\n\t\t}\r\n\r\n\t\tconst updateRow = (index: number) => {\r\n\t\t\tconst option = currentOptions[index + offset]\r\n\t\t\tconst [iconEl, labelEl, detailsEl] = rows[index].children as HTMLCollectionOf<HTMLDivElement>\r\n\t\t\tconst completion = option[4]\r\n\t\t\tconst icon = completion.icon || \"variable\"\r\n\r\n\t\t\tupdateMatched(labelEl, option[1], completion.label)\r\n\t\t\tupdateNode(detailsEl.firstChild as Text, completion.detail || \"\")\r\n\r\n\t\t\tif (prevIcons[index] != icon) {\r\n\t\t\t\ticonEl.className = `pce-ac-icon pce-ac-icon-${(prevIcons[index] = icon)}`\r\n\t\t\t\ticonEl.style.color = `var(--pce-ac-icon-${icon})`\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst scrollActiveIntoView = () => {\r\n\t\t\tsetRowHeight()\r\n\t\t\tconst scrollTop = tooltip.scrollTop\r\n\t\t\tconst lower = rowHeight * activeIndex\r\n\t\t\tconst upper = rowHeight * (activeIndex + 1) - tooltip.clientHeight\r\n\r\n\t\t\ttooltip.scrollTop = scrollTop > lower ? lower : scrollTop < upper ? upper : scrollTop\r\n\t\t}\r\n\r\n\t\tconst updateActive = () => {\r\n\t\t\tconst newActive = rows[activeIndex - offset]\r\n\t\t\tif (newActive != active) {\r\n\t\t\t\tactive?.removeAttribute(\"aria-selected\")\r\n\t\t\t\tif (newActive) {\r\n\t\t\t\t\ttextarea.setAttribute(\"aria-activedescendant\", newActive.id)\r\n\t\t\t\t\tnewActive.setAttribute(\"aria-selected\", true as any)\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttextarea.removeAttribute(\"aria-activedescendant\")\r\n\t\t\t\t}\r\n\t\t\t\tactive = newActive\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst move = (decrement?: boolean) => {\r\n\t\t\tif (decrement) activeIndex = activeIndex ? activeIndex - 1 : numOptions - 1\r\n\t\t\telse activeIndex = activeIndex + 1 < numOptions ? activeIndex + 1 : 0\r\n\t\t\tscrollActiveIntoView()\r\n\t\t\tupdateActive()\r\n\t\t}\r\n\r\n\t\tconst insertOption = (index: number) => {\r\n\t\t\tif (options.readOnly) return\r\n\t\t\tlet [, , start, end, completion] = currentOptions[index]\r\n\t\t\tlet { label, tabStops: tabStops = [], insert } = completion\r\n\t\t\tlet l = tabStops.length\r\n\t\t\ttabStops = tabStops.map(stop => stop + start)\r\n\r\n\t\t\tif (insert) {\r\n\t\t\t\tlet indent = \"\\n\" + getLineBefore(editor.value, pos).match(/\\s*/)![0]\r\n\t\t\t\tlet tab = options.insertSpaces == false ? \"\\t\" : \" \".repeat(options.tabSize || 2)\r\n\t\t\t\tlet temp = tabStops.slice()\r\n\r\n\t\t\t\tinsert = insert.replace(/\\n|\\t/g, (match, index: number) => {\r\n\t\t\t\t\tlet replacement = match == \"\\t\" ? tab : indent\r\n\t\t\t\t\tlet diff = replacement.length - 1\r\n\t\t\t\t\tlet i = 0\r\n\t\t\t\t\twhile (i < l) {\r\n\t\t\t\t\t\tif (temp[i] > index + start) tabStops[i] += diff\r\n\t\t\t\t\t\ti++\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn replacement\r\n\t\t\t\t})\r\n\t\t\t} else insert = label\r\n\r\n\t\t\tif (l % 2) tabStops[l] = tabStops[l - 1]\r\n\r\n\t\t\tinsertText(editor, insert, start, end, tabStops[0], tabStops[1])\r\n\r\n\t\t\tif (l > 2) {\r\n\t\t\t\tstops = tabStops\r\n\t\t\t\tactiveStop = 0\r\n\t\t\t\tprevLength = editor.value.length\r\n\t\t\t\tupdateStops()\r\n\t\t\t\tcurrentSelection = getSelection()\r\n\t\t\t\tif (!tabStopsContainer.parentNode) editor.overlays.append(tabStopsContainer)\r\n\t\t\t}\r\n\t\t\tcursor!.scrollIntoView()\r\n\t\t}\r\n\r\n\t\tconst moveActiveStop = (offset: number) => {\r\n\t\t\tactiveStop += offset\r\n\t\t\teditor.setSelection(stops![activeStop], stops![activeStop + 1])\r\n\t\t\tcursor!.scrollIntoView()\r\n\t\t}\r\n\r\n\t\tconst clearStops = () => {\r\n\t\t\ttabStopsContainer.remove()\r\n\t\t\tstops = null\r\n\t\t}\r\n\r\n\t\tconst updateStops = () => {\r\n\t\t\tlet sorted: [number, number][] = []\r\n\t\t\tlet i = 0\r\n\t\t\tfor (; i < stops!.length; ) sorted[i / 2] = [stops![i++], stops![i++]]\r\n\t\t\tsorted.sort((a, b) => a[0] - b[0])\r\n\t\t\tupdateMatched(tabStopsContainer, sorted.flat(), editor.value)\r\n\t\t}\r\n\r\n\t\tconst startQuery = (explicit = false) => {\r\n\t\t\tconst [start, end, dir] = getSelection()\r\n\t\t\tconst language = getLanguage(editor, (pos = dir < \"f\" ? start : end))\r\n\t\t\tconst definition = map[language]\r\n\t\t\tif (definition && (explicit || start == end) && !options.readOnly) {\r\n\t\t\t\tconst value = editor.value\r\n\t\t\t\tconst lineBefore = getLineBefore(value, pos)\r\n\t\t\t\tconst before = value.slice(0, pos)\r\n\t\t\t\tconst context: CompletionContext = {\r\n\t\t\t\t\tbefore,\r\n\t\t\t\t\tlineBefore,\r\n\t\t\t\t\tlanguage,\r\n\t\t\t\t\texplicit,\r\n\t\t\t\t\tpos,\r\n\t\t\t\t}\r\n\t\t\t\tconst newContext = Object.assign(context, definition.context?.(context, editor))\r\n\t\t\t\tconst filter = config.filter\r\n\r\n\t\t\t\tcurrentOptions = []\r\n\t\t\t\tdefinition.sources.forEach(source => {\r\n\t\t\t\t\tconst result = source(newContext, editor)\r\n\t\t\t\t\tif (result) {\r\n\t\t\t\t\t\tconst from = result.from\r\n\t\t\t\t\t\tconst query = before.slice(from)\r\n\r\n\t\t\t\t\t\tresult.options.forEach(option => {\r\n\t\t\t\t\t\t\tconst filterResult = filter(query, option.label)\r\n\t\t\t\t\t\t\tif (filterResult) {\r\n\t\t\t\t\t\t\t\tfilterResult[0] += option.boost || 0\r\n\t\t\t\t\t\t\t\t// @ts-expect-error Allow mutation\r\n\t\t\t\t\t\t\t\tfilterResult.push(from, result.to ?? end, option)\r\n\t\t\t\t\t\t\t\t// @ts-expect-error Allow mutation\r\n\t\t\t\t\t\t\t\tcurrentOptions.push(filterResult)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (currentOptions[0]) {\r\n\t\t\t\t\tcurrentOptions.sort((a, b) => b[0] - a[0] || a[4].label.localeCompare(b[4].label))\r\n\t\t\t\t\tnumOptions = currentOptions.length\r\n\t\t\t\t\tactiveIndex = offset = 0\r\n\r\n\t\t\t\t\tfor (let i = 0, l = numOptions < windowSize ? numOptions : windowSize; i < l; ) {\r\n\t\t\t\t\t\tupdateRow(i++)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!isOpen) {\r\n\t\t\t\t\t\tconst { clientHeight, clientWidth } = editor.scrollContainer\r\n\t\t\t\t\t\tconst pos = cursor!.getPosition()\r\n\t\t\t\t\t\tconst max = Math.max(pos.bottom, pos.top)\r\n\t\t\t\t\t\ttooltip.style.width = `min(25em, ${clientWidth}px - var(--padding-left) - 1em)`\r\n\t\t\t\t\t\ttooltip.style.maxHeight = `min(17em, ${max}px + .25em, ${clientHeight}px - 2em)`\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlist.style.paddingTop = \"\"\r\n\t\t\t\t\tlist.style.height = rowHeight ? rowHeight * numOptions + \"px\" : 1.4 * numOptions + \"em\"\r\n\t\t\t\t\ttooltip.scrollTop = 0\r\n\r\n\t\t\t\t\tisOpen = true\r\n\t\t\t\t\tshow(config.preferAbove)\r\n\t\t\t\t\ttextarea.setAttribute(\"aria-haspopup\", \"listbox\")\r\n\t\t\t\t\tupdateActive()\r\n\t\t\t\t} else hide()\r\n\t\t\t} else hide()\r\n\t\t}\r\n\r\n\t\tconst addSelectionHandler = () => {\r\n\t\t\tif (!cursor && (cursor = editor.extensions.cursor)) {\r\n\t\t\t\t// Must be added after the cursor's selectionChange handler\r\n\t\t\t\tadd(\"selectionChange\", selection => {\r\n\t\t\t\t\tif (stops && (selection[0] < stops[activeStop] || selection[1] > stops[activeStop + 1])) {\r\n\t\t\t\t\t\tclearStops()\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (shouldOpen) {\r\n\t\t\t\t\t\tshouldOpen = false\r\n\t\t\t\t\t\tstartQuery()\r\n\t\t\t\t\t} else hide()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttabStopsContainer.className = \"pce-tabstops\"\r\n\t\ttextarea.setAttribute(\"aria-controls\", id)\r\n\t\ttextarea.setAttribute(\"aria-autocomplete\", \"list\")\r\n\r\n\t\tfor (let i = 0; i < windowSize; ) {\r\n\t\t\tlist.append(rowTemplate())\r\n\t\t\trows[i].id = id + \"-\" + i++\r\n\t\t}\r\n\r\n\t\ttooltip.onscroll = () => {\r\n\t\t\tsetRowHeight()\r\n\t\t\tconst newOffset = Math.min(Math.floor(tooltip.scrollTop / rowHeight), numOptions - windowSize)\r\n\t\t\tif (newOffset == offset || newOffset < 0) return\r\n\r\n\t\t\toffset = newOffset\r\n\t\t\tfor (let i = 0; i < windowSize; i) {\r\n\t\t\t\tupdateRow(i++)\r\n\t\t\t}\r\n\r\n\t\t\tlist.style.paddingTop = offset * rowHeight + \"px\"\r\n\t\t\tupdateActive()\r\n\t\t}\r\n\r\n\t\tadd(\"update\", () => {\r\n\t\t\taddSelectionHandler()\r\n\r\n\t\t\tif (stops) {\r\n\t\t\t\tlet value = editor.value\r\n\t\t\t\tlet diff = prevLength - (prevLength = value.length)\r\n\t\t\t\tlet [start, end] = currentSelection\r\n\t\t\t\tlet i = 0\r\n\t\t\t\tlet l = stops.length\r\n\t\t\t\tlet activeStart = stops[activeStop]\r\n\t\t\t\tlet activeEnd = stops[activeStop + 1]\r\n\r\n\t\t\t\tif (start < stops[activeStop] || end > activeEnd) {\r\n\t\t\t\t\tclearStops()\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (isDeleteForwards) end++\r\n\t\t\t\t\tif (end <= activeEnd) stops[activeStop + 1] -= diff\r\n\t\t\t\t\tif (end <= activeStart && diff > 0) stops[activeStop] -= diff\r\n\t\t\t\t\tfor (; i < l; i += 2) {\r\n\t\t\t\t\t\tif (i != activeStop && stops[i] >= activeEnd) {\r\n\t\t\t\t\t\t\tstops[i] = Math.max(stops[i] - diff, stops[activeStop + 1])\r\n\t\t\t\t\t\t\tstops[i + 1] = Math.max(stops[i + 1] - diff, stops[activeStop + 1])\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tupdateStops()\r\n\t\t\t\t}\r\n\t\t\t\tisDeleteForwards = false\r\n\t\t\t\tcurrentSelection = getSelection()\r\n\t\t\t}\r\n\t\t})\r\n\t\taddTextareaListener(editor, \"mousedown\", () => {\r\n\t\t\tif (stops) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t// Timeout runs before selectionChange, but after\r\n\t\t\t\t\t// the selection changes as a result of the click\r\n\t\t\t\t\tconst [start, end] = getSelection()\r\n\t\t\t\t\tif (stops && (start < stops[activeStop] || end > stops[activeStop + 1])) {\r\n\t\t\t\t\t\tfor (let i = 0, l = stops.length; i < stops.length; i += 2) {\r\n\t\t\t\t\t\t\tif (start >= stops[i] && end <= stops[i + 1]) {\r\n\t\t\t\t\t\t\t\tif (i + 3 > l) clearStops()\r\n\t\t\t\t\t\t\t\telse activeStop = i\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t\taddTextareaListener(\r\n\t\t\teditor,\r\n\t\t\t\"beforeinput\",\r\n\t\t\te => {\r\n\t\t\t\tlet inputType = e.inputType\r\n\t\t\t\tlet isDelete = inputType[0] == \"d\"\r\n\t\t\t\tlet isInsert = inputType == \"insertText\"\r\n\t\t\t\tlet data = e.data\r\n\t\t\t\tif (\r\n\t\t\t\t\tisOpen &&\r\n\t\t\t\t\tisInsert &&\r\n\t\t\t\t\t!prevSelection &&\r\n\t\t\t\t\tdata &&\r\n\t\t\t\t\t!data[1] &&\r\n\t\t\t\t\tcurrentOptions[activeIndex][4].commitChars?.includes(data)\r\n\t\t\t\t) {\r\n\t\t\t\t\tinsertOption(activeIndex)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (stops) {\r\n\t\t\t\t\tcurrentSelection = getSelection()\r\n\t\t\t\t\tisDeleteForwards =\r\n\t\t\t\t\t\tisDelete && inputType[13] == \"F\" && currentSelection[0] == currentSelection[1]\r\n\t\t\t\t}\r\n\t\t\t\tshouldOpen =\r\n\t\t\t\t\t!config.explicitOnly &&\r\n\t\t\t\t\t(shouldOpen || (isInsert && !prevSelection) || (isDelete && isOpen))\r\n\t\t\t},\r\n\t\t\ttrue,\r\n\t\t)\r\n\t\taddTextareaListener(editor, \"blur\", e => {\r\n\t\t\tif (config.closeOnBlur != false && !tooltip.contains(e.relatedTarget as Element)) hide()\r\n\t\t})\r\n\t\taddTextareaListener(\r\n\t\t\teditor,\r\n\t\t\t\"keydown\",\r\n\t\t\te => {\r\n\t\t\t\tconst key = e.key\r\n\t\t\t\tconst code = getModifierCode(e)\r\n\r\n\t\t\t\tif (key == \" \" && code == 2) {\r\n\t\t\t\t\taddSelectionHandler()\r\n\t\t\t\t\tif (cursor) startQuery(true)\r\n\t\t\t\t\tpreventDefault(e)\r\n\t\t\t\t} else if (!code && isOpen) {\r\n\t\t\t\t\tif (/^Arrow[UD]/.test(key)) {\r\n\t\t\t\t\t\tmove(key[5] == \"U\")\r\n\t\t\t\t\t\tpreventDefault(e)\r\n\t\t\t\t\t} else if (/Tab|Enter/.test(key)) {\r\n\t\t\t\t\t\tinsertOption(activeIndex)\r\n\t\t\t\t\t\tpreventDefault(e)\r\n\t\t\t\t\t} else if (key == \"Escape\") {\r\n\t\t\t\t\t\thide()\r\n\t\t\t\t\t\tpreventDefault(e)\r\n\t\t\t\t\t} else if (key.slice(0, 4) == \"Page\") {\r\n\t\t\t\t\t\tsetRowHeight()\r\n\t\t\t\t\t\tlet top = tooltip.scrollTop\r\n\t\t\t\t\t\tlet height = tooltip.clientHeight\r\n\t\t\t\t\t\tlet newActive: number\r\n\t\t\t\t\t\tif (key[4] == \"U\") {\r\n\t\t\t\t\t\t\tnewActive = Math.ceil(top / rowHeight)\r\n\t\t\t\t\t\t\tactiveIndex =\r\n\t\t\t\t\t\t\t\tactiveIndex == newActive || newActive - 1 == activeIndex\r\n\t\t\t\t\t\t\t\t\t? Math.ceil(Math.max(0, (top - height) / rowHeight + 1))\r\n\t\t\t\t\t\t\t\t\t: newActive\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttop += height + 1\r\n\t\t\t\t\t\t\tnewActive = Math.ceil(top / rowHeight - 2)\r\n\t\t\t\t\t\t\tactiveIndex =\r\n\t\t\t\t\t\t\t\tactiveIndex == newActive || newActive + 1 == activeIndex\r\n\t\t\t\t\t\t\t\t\t? Math.ceil(Math.min(numOptions - 1, (top + height) / rowHeight - 3))\r\n\t\t\t\t\t\t\t\t\t: newActive\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tscrollActiveIntoView()\r\n\t\t\t\t\t\tupdateActive()\r\n\t\t\t\t\t\tpreventDefault(e)\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ((code & 7) == 0 && !isOpen && key == \"Tab\" && stops) {\r\n\t\t\t\t\tif (!code) {\r\n\t\t\t\t\t\tmoveActiveStop(2)\r\n\t\t\t\t\t\tif (activeStop + 3 > stops.length) clearStops()\r\n\t\t\t\t\t\tpreventDefault(e)\r\n\t\t\t\t\t} else if (activeStop) {\r\n\t\t\t\t\t\tmoveActiveStop(-2)\r\n\t\t\t\t\t\tpreventDefault(e)\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (!isOpen && !code && key == \"Escape\") {\r\n\t\t\t\t\tclearStops()\r\n\t\t\t\t\tpreventDefault(e)\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\ttrue,\r\n\t\t)\r\n\r\n\t\tlist.onmousedown = e => {\r\n\t\t\tinsertOption([].indexOf.call(rows, (e.target as HTMLElement).closest(\"li\") as never) + offset)\r\n\t\t\tpreventDefault(e)\r\n\t\t}\r\n\r\n\t\ttooltip.addEventListener(\"focusout\", e => {\r\n\t\t\tif (config.closeOnBlur != false && e.relatedTarget != textarea) hide()\r\n\t\t})\r\n\t}\r\n\r\nexport { autoComplete, registerCompletions }\r\n","import { CompletionFilter } from \"./types\"\r\n\r\n/**\r\n * Fuzzy filter that only requires that the option includes all the characters in the\r\n * query string in order with any number of character between each.\r\n *\r\n * Occurrences that result in score penalties:\r\n * - Skipping characters in the option.\r\n * - The case of the characters doesn't match.\r\n * - The match doesn't start at the beginning.\r\n * - The option is longer than the query.\r\n */\r\nconst fuzzyFilter: CompletionFilter = (query: string, option: string) => {\r\n\tconst optionLen = option.length\r\n\tconst queryLen = query.length\r\n\r\n\tif (queryLen > optionLen) return\r\n\tif (queryLen == 1 || queryLen == optionLen) return strictFilter(query, option)\r\n\r\n\tconst queryLc = query.toLowerCase()\r\n\tconst optionLc = option.toLowerCase()\r\n\tconst matched: number[] = []\r\n\tconst fullMatch = optionLc.indexOf(queryLc)\r\n\r\n\tlet score = 0\r\n\tlet i = 0\r\n\tlet prevPos = 0\r\n\tlet j = 0\r\n\tfor (; i < queryLen; i++) {\r\n\t\tconst char = queryLc[i]\r\n\t\tconst pos = fullMatch > -1 ? i + fullMatch : optionLc.indexOf(char, prevPos)\r\n\t\tconst hasSkipped = pos > prevPos\r\n\r\n\t\tif (pos < 0) return\r\n\t\tif (hasSkipped) score -= 800\r\n\t\tif (hasSkipped || !j) {\r\n\t\t\tmatched[j++] = pos\r\n\t\t\tmatched[j++] = pos + 1\r\n\t\t} else {\r\n\t\t\tmatched[j - 1] = pos + 1\r\n\t\t}\r\n\r\n\t\t// Add a penalty if the query and option had different case\r\n\t\tif ((<any>(char != query[i])) ^ (<any>(optionLc[pos] != option[pos]))) score -= 100\r\n\t\tprevPos = pos + 1\r\n\t}\r\n\r\n\treturn [score - optionLen - (queryLen < optionLen ? 100 : 0), matched]\r\n}\r\n\r\n/**\r\n * Strict filter that requires the option to start with the query string.\r\n *\r\n * Occurrences that result in score penalties:\r\n * - The case of the query and the start of the option is different.\r\n * - The option is longer than the query.\r\n */\r\nconst strictFilter: CompletionFilter = (query: string, option: string) => {\r\n\tconst optionLen = option.length\r\n\tconst queryLen = query.length\r\n\r\n\tif (queryLen > optionLen) return\r\n\r\n\tconst start = option.slice(0, queryLen)\r\n\tconst score = start == query ? 0 : query.toLowerCase() == start.toLowerCase() ? -200 : null\r\n\tif (score == null) return\r\n\r\n\treturn [query ? score - optionLen - (queryLen < optionLen ? 100 : 0) : 0, [0, queryLen]]\r\n}\r\n\r\nexport { fuzzyFilter, strictFilter }\r\n"],"names":["index","offset","pos"],"mappings":"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"}