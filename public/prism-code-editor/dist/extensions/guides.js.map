{"version":3,"file":"guides.js","sources":["../../src/extensions/guides.ts"],"sourcesContent":["/** @module guides */\r\n\r\nimport { createTemplate } from \"../core.js\"\r\nimport { Extension, PrismEditor } from \"../types.js\"\r\n\r\nconst template = createTemplate(\r\n\t'<div class=guide-indents style=left:var(--padding-left);bottom:auto;right:auto> ',\r\n)\r\n\r\nconst indentTemplate = createTemplate(\r\n\t'<div style=width:1px;position:absolute;background:var(--bg-guide-indent)>',\r\n)\r\n\r\nexport interface IndentGuides extends Extension {\r\n\t/** Collection of all the guide lines. */\r\n\treadonly lines: HTMLCollectionOf<HTMLDivElement>\r\n\t/** Indentation for each line. Is -1 for lines with only whitespace. */\r\n\treadonly indentLevels: number[]\r\n}\r\n\r\n/** Extension adding indent guides to an editor. Does not work with word wrap. */\r\nexport const indentGuides = (): IndentGuides => {\r\n\tlet tabSize: number\r\n\tlet prevLength = 0\r\n\tlet lineIndentMap: number[]\r\n\tlet active = -1\r\n\tlet currentEditor: PrismEditor\r\n\r\n\tconst lines: HTMLDivElement[] = []\r\n\tconst indents: number[][] = []\r\n\tconst container = template()\r\n\tconst indentLevels: number[] = []\r\n\r\n\tconst update = (code: string) => {\r\n\t\tlineIndentMap = []\r\n\t\tconst newIndents = getIndents(code.split(\"\\n\"))\r\n\t\tconst l = newIndents.length\r\n\r\n\t\tfor (let i = 0, prev: number[] = [], next = newIndents[0]; next; i++) {\r\n\t\t\tconst style = (lines[i] ||= indentTemplate()).style\r\n\t\t\tconst [top, height, left] = next\r\n\t\t\tconst old = indents[i]\r\n\r\n\t\t\tnext = newIndents[i + 1]\r\n\r\n\t\t\tif (top != old?.[0]) style.top = top + \"00%\"\r\n\t\t\tif (height != old?.[1]) style.height = height + \"00%\"\r\n\t\t\tif (left != old?.[2]) style.left = left * 100 + \"%\"\r\n\r\n\t\t\tconst isSingleIndent = prev[0] != top && next?.[0] != top,\r\n\t\t\t\tisSingleOutdent = prev[0] + prev[1] != top + height && next?.[0] + next?.[1] != top + height\r\n\r\n\t\t\tfor (let j = -isSingleIndent, l = height + <any>isSingleOutdent; j < l; j++)\r\n\t\t\t\tlineIndentMap[j + top] = i\r\n\r\n\t\t\tprev = indents[i] = newIndents[i]\r\n\t\t}\r\n\r\n\t\tfor (let i = prevLength; i > l; ) lines[--i].remove()\r\n\t\tcontainer.append(...lines.slice(prevLength, (prevLength = l)))\r\n\t}\r\n\r\n\tconst updateActive = () => {\r\n\t\tconst newActive = lineIndentMap[currentEditor.activeLineNumber - 1] ?? -1\r\n\r\n\t\tif (newActive != active) {\r\n\t\t\tactive > -1 && (lines[active].className = \"\")\r\n\t\t\tnewActive > -1 && (lines[newActive].className = \"active\")\r\n\t\t}\r\n\t\tactive = newActive\r\n\t}\r\n\r\n\tconst getIndents = (lines: string[]) => {\r\n\t\tconst l = lines.length\r\n\t\tconst stack: number[][] = []\r\n\t\tconst results: number[][] = []\r\n\r\n\t\tfor (let prevIndent = 0, emptyPos = -1, i = 0, p = 0; ; i++) {\r\n\t\t\tconst last = i == l\r\n\t\t\tconst indent = last ? 0 : (indentLevels[i] = getIndentCount(lines[i]))\r\n\t\t\tif (indent < 0) {\r\n\t\t\t\tif (emptyPos < 0) emptyPos = i\r\n\t\t\t} else {\r\n\t\t\t\tfor (let j = indent; j < prevIndent; j++) {\r\n\t\t\t\t\t// Updating height of the closed lines\r\n\t\t\t\t\tstack[j][1] = (emptyPos < 0 || (j == indent && !last) ? i : emptyPos) - stack[j][0]\r\n\t\t\t\t}\r\n\t\t\t\tfor (let j = prevIndent; j < indent; ) {\r\n\t\t\t\t\t// Adding new indentation lines\r\n\t\t\t\t\tresults[p++] = stack[j] = [\r\n\t\t\t\t\t\temptyPos < 0 || j > prevIndent ? i : emptyPos,\r\n\t\t\t\t\t\t0,\r\n\t\t\t\t\t\tj++ * tabSize,\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t\temptyPos = -1\r\n\t\t\t\tprevIndent = indent\r\n\t\t\t}\r\n\t\t\tif (last) break\r\n\t\t}\r\n\t\tindentLevels.length = l\r\n\t\treturn results\r\n\t}\r\n\r\n\tconst getIndentCount = (text: string) => {\r\n\t\tlet l = text.search(/\\S/)\r\n\t\tlet result = 0\r\n\t\tif (l < 0) return l\r\n\t\tfor (let i = 0; i < l; ) {\r\n\t\t\tresult += text[i++] == \"\\t\" ? tabSize - (result % tabSize) : 1\r\n\t\t}\r\n\t\treturn Math.ceil(result / tabSize)\r\n\t}\r\n\r\n\treturn {\r\n\t\tlines: <HTMLCollectionOf<HTMLDivElement>>container.children,\r\n\t\tindentLevels,\r\n\t\tupdate(editor, options) {\r\n\t\t\tif (!currentEditor) {\r\n\t\t\t\tcurrentEditor = editor\r\n\t\t\t\teditor.extensions.indentGuides = this\r\n\t\t\t\teditor.overlays.append(container)\r\n\t\t\t\teditor.addListener(\"update\", update)\r\n\t\t\t\teditor.addListener(\"selectionChange\", updateActive)\r\n\t\t\t}\r\n\t\t\tcontainer.style.display = options.wordWrap ? \"none\" : \"\"\r\n\r\n\t\t\tif (tabSize != (tabSize = options.tabSize || 2)) update(editor.value), updateActive()\r\n\t\t},\r\n\t}\r\n}\r\n"],"names":["l","lines"],"mappings":"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"}