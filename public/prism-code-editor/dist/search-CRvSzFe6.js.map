{"version":3,"file":"search-CRvSzFe6.js","sources":["../src/extensions/search/search.ts"],"sourcesContent":["import { regexEscape } from \"../../utils/index.js\"\r\nimport { createTemplate } from \"../../core.js\"\r\nimport { PrismEditor } from \"../../types.js\"\r\n\r\nconst searchTemplate = createTemplate(\r\n\t'<div style=\"color:#0000;contain:strict;padding:0 var(--_pse) 0 var(--padding-left)\" aria-hidden=true> ',\r\n)\r\n\r\nconst matchTemplate = createTemplate(\"<span> \")\r\n\r\nconst testBoundary = (str: string, position: number, pattern = /[_\\p{N}\\p{L}]{2}/u) => {\r\n\tif (!position) return false\r\n\treturn pattern.test(\r\n\t\tstr.slice(\r\n\t\t\tposition - (str.codePointAt(position - 2)! > 0xffff ? 2 : 1),\r\n\t\t\tposition + (str.codePointAt(position)! > 0xffff ? 2 : 1),\r\n\t\t),\r\n\t)\r\n}\r\n\r\nexport type SearchFilter = (start: number, end: number) => boolean\r\n\r\n/** Object with methods useful for performing a search and highlighting the matches. */\r\nexport interface SearchAPI {\r\n\t/**\r\n\t * Unhides the search container and highlights all matches of the specified string in the editor.\r\n\t * @param str String to search for.\r\n\t * @param caseSensitive Whether or not the search is case sensetive.\r\n\t * @param wholeWord Whether or not matches must be surrounded by word boundries.\r\n\t * @param useRegExp If true, special characters won't be escaped when creating the RegExp.\r\n\t * @param selection Boundries to search between. If excluded, all the code is searched.\r\n\t * @param filter A function called for each match with the start and end positions of the match.\r\n\t * If it returns false, the match won't be included.\r\n\t * @param wholeWordBoundry Pattern controlling the behavior of whole word search. Best left\r\n\t * undefined unless you know what you're doing. Does nothing if `wholeWord` isn't set to `true`.\r\n\t * Defaults to `/[_\\p{N}\\p{L}]{2}/u`.\r\n\t * @returns An error message if the RegExp was invalid.\r\n\t */\r\n\tsearch(\r\n\t\tstr: string,\r\n\t\tcaseSensitive?: boolean,\r\n\t\twholeWord?: boolean,\r\n\t\tuseRegExp?: boolean,\r\n\t\tselection?: [number, number],\r\n\t\tfilter?: SearchFilter,\r\n\t\twholeWordBoundry?: RegExp,\r\n\t): string | void\r\n\t/** Container that all the search results are appended to. */\r\n\treadonly container: HTMLDivElement\r\n\t/** Current regex used for searching. */\r\n\treadonly regex: RegExp\r\n\t/** Array of positions of all the matches. */\r\n\treadonly matches: [number, number][]\r\n\t/** Hides the search container and removes all the matches. */\r\n\tstopSearch(): void\r\n}\r\n\r\n/** Function adding search functionality to an editor. */\r\nconst createSearchAPI = (editor: PrismEditor): SearchAPI => {\r\n\tconst container = searchTemplate()\r\n\tconst nodes: ChildNode[] = [container.firstChild!]\r\n\tconst nodeValues: string[] = [\" \"]\r\n\tconst matchPositions: [number, number][] = []\r\n\tconst stopSearch = () => {\r\n\t\tif (matchPositions[0]) {\r\n\t\t\tmatchPositions.length = 0\r\n\t\t\tcontainer.remove()\r\n\t\t}\r\n\t}\r\n\r\n\tlet regex: RegExp\r\n\tlet nodeCount = 1\r\n\r\n\treturn {\r\n\t\tsearch(str, caseSensitive, wholeWord, useRegExp, selection, filter, pattern) {\r\n\t\t\tif (!str) return stopSearch()\r\n\t\t\tif (!useRegExp) str = regexEscape(str)\r\n\t\t\tconst value = editor.value\r\n\t\t\tconst searchStr = selection ? value.slice(...selection) : value\r\n\t\t\tconst offset = selection ? selection[0] : 0\r\n\r\n\t\t\tlet match: RegExpExecArray | null\r\n\t\t\tlet l: number\r\n\t\t\tlet index: number\r\n\t\t\tlet i = 0\r\n\r\n\t\t\ttry {\r\n\t\t\t\tregex = RegExp(str, `gum${caseSensitive ? \"\" : \"i\"}`)\r\n\t\t\t\twhile ((match = regex.exec(searchStr))) {\r\n\t\t\t\t\tl = match[0].length\r\n\t\t\t\t\tindex = match.index + offset\r\n\t\t\t\t\tif (!l) regex.lastIndex += value.codePointAt(index)! > 0xffff ? 2 : 1\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\twholeWord &&\r\n\t\t\t\t\t\t(testBoundary(value, index, pattern) || testBoundary(value, index + l, pattern))\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\tif (!filter || filter(index, index + l)) matchPositions[i++] = [index, index + l]\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tstopSearch()\r\n\t\t\t\treturn (<Error>e).message\r\n\t\t\t}\r\n\r\n\t\t\tif (i) {\r\n\t\t\t\tmatchPositions.length = i\r\n\t\t\t\tl = Math.min(i * 2, 20000)\r\n\r\n\t\t\t\tfor (i = nodes.length; i <= l; ) {\r\n\t\t\t\t\tnodes[i++] = matchTemplate()\r\n\t\t\t\t\tnodes[i++] = new Text()\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (i = nodeCount - 1; i > l; ) nodes[i--].remove()\r\n\t\t\t\tif (nodeCount <= l) container.append(...nodes.slice(nodeCount, l + 1))\r\n\r\n\t\t\t\t// Diffing from bottom to top as well should be better\r\n\t\t\t\tlet prevEnd = 0\r\n\t\t\t\tfor (i = 0; i < l; ++i) {\r\n\t\t\t\t\tconst [start, end] = matchPositions[i / 2]\r\n\t\t\t\t\tconst before = value.slice(prevEnd, start)\r\n\t\t\t\t\tconst match = value.slice(start, (prevEnd = end))\r\n\r\n\t\t\t\t\tif (before != nodeValues[i]) (<Text>nodes[i]).data = nodeValues[i] = before\r\n\t\t\t\t\tif (match != nodeValues[++i]) (<Text>nodes[i].firstChild).data = nodeValues[i] = match\r\n\t\t\t\t}\r\n\r\n\t\t\t\t;(<Text>nodes[l]).data = nodeValues[l] = value.slice(prevEnd)\r\n\t\t\t\tif (!container.parentNode) editor.overlays.append(container)\r\n\t\t\t\tnodeCount = l + 1\r\n\t\t\t} else stopSearch()\r\n\t\t},\r\n\t\tcontainer,\r\n\t\tget regex() {\r\n\t\t\treturn regex\r\n\t\t},\r\n\t\tmatches: matchPositions,\r\n\t\tstopSearch,\r\n\t}\r\n}\r\n\r\nexport { createSearchAPI, searchTemplate, matchTemplate }\r\n"],"names":["match"],"mappings":"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"}