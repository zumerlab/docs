{"version":3,"file":"selection-C1jc115I.js","sources":["../src/extensions/search/selection.ts"],"sourcesContent":["import { BasicExtension } from \"../../index.js\"\r\nimport { SearchAPI, SearchFilter, createSearchAPI } from \"./search.js\"\r\n\r\nexport interface SelectionMatchHighlighter extends BasicExtension {\r\n\t/**\r\n\t * Search API used by the extension.\r\n\t * Can be used get the position of the matches for example.\r\n\t * This property is only present after the extension is added to an editor.\r\n\t */\r\n\tapi?: SearchAPI\r\n}\r\n\r\nexport interface WordHighlighter extends SelectionMatchHighlighter {\r\n\t/** Sets the search filter used. Useful for updating the filter after changing an editor's language. */\r\n\tsetFilter(newFilter: SearchFilter): void\r\n}\r\n\r\n/**\r\n * Extension that highlights selection matches in an editor.\r\n * @param caseSensitive Whether or not matches must have the same case. Defaults to false.\r\n * @param minLength Minimum length needed to perform a search. Defaults to 1.\r\n * @param maxLength Maximum length at which to perform a search. Defaults to 200.\r\n\r\n * Lower values of `minLength` and higher values of `maxLength` can impact performance.\r\n * \r\n * The CSS-selector `.selection-matches span` can be used to style the matches.\r\n */\r\nconst highlightSelectionMatches = (caseSensitive?: boolean, minLength = 1, maxLength = 200) => {\r\n\tconst self: SelectionMatchHighlighter = editor => {\r\n\t\tconst searchAPI = (self.api = createSearchAPI(editor))\r\n\t\tconst container = searchAPI.container\r\n\r\n\t\tcontainer.style.zIndex = <any>-1\r\n\t\tcontainer.className = \"selection-matches\"\r\n\r\n\t\teditor.addListener(\"selectionChange\", ([start, end], value) => {\r\n\t\t\tvalue = editor.focused ? value.slice(start, end) : \"\"\r\n\t\t\tstart += value.search(/\\S/)\r\n\t\t\tvalue = value.trim()\r\n\t\t\tlet l = value.length\r\n\r\n\t\t\tsearchAPI.search(\r\n\t\t\t\tminLength > l || l > maxLength ? \"\" : value,\r\n\t\t\t\tcaseSensitive,\r\n\t\t\t\tfalse,\r\n\t\t\t\tfalse,\r\n\t\t\t\tundefined,\r\n\t\t\t\t(mStart, mEnd) => mStart > start || mEnd <= start\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\treturn self\r\n}\r\n\r\n/**\r\n * Extension that highlights all instances of the word the cursor is on if there's no selection.\r\n * @param filter Function that can filter away matches based on their position.\r\n * The filter can be changed later using the `setFilter` method.\r\n * @param includeHyphens A function returning whether or not hyphens should be included in the search.\r\n * For languages that don't commonly use hyphens as an operator (such as CSS), it makes sense to\r\n * return true. If this parameter is omitted, hyphens are not included.\r\n *\r\n * The CSS-selector `.word-matches span` can be used to style the matches.\r\n *\r\n * @example\r\n * This filters away all words that start inside a string, comment or keyword or regex token.\r\n * Different filter functions should be chosen based on the language.\r\n * ```\r\n * const selector = \".string, .comment, .keyword, .regex\"\r\n * const filter = start => !getClosestToken(editor, selector, 0, 0, start)\r\n * const includeHyphens = position => getLanguage(editor, position) == \"css\"\r\n *\r\n * editor.addExtensions(\r\n * \thighlightCurrentWord(filter, includeHyphens)\r\n * )\r\n * ```\r\n */\r\nconst highlightCurrentWord = (\r\n\tfilter?: SearchFilter,\r\n\tincludeHyphens?: (cursorPosition: number) => boolean,\r\n) => {\r\n\tconst self: WordHighlighter = editor => {\r\n\t\tlet noHighlight = false\r\n\t\tlet searchAPI = (self.api = createSearchAPI(editor))\r\n\t\tlet container = searchAPI.container\r\n\r\n\t\tcontainer.style.zIndex = <any>-1\r\n\t\tcontainer.className = \"word-matches\"\r\n\r\n\t\teditor.addListener(\"update\", () => (noHighlight = true))\r\n\t\teditor.addListener(\"selectionChange\", ([start, end], value) => {\r\n\t\t\tif (start < end || !editor.focused || noHighlight) searchAPI.search(\"\")\r\n\t\t\telse {\r\n\t\t\t\tlet group = `[_$\\\\p{L}\\\\d${includeHyphens && includeHyphens(start) ? \"-\" : \"\"}]`\r\n\t\t\t\tlet before = value.slice(0, start).match(RegExp(group + \"*$\", \"u\"))!\r\n\t\t\t\tlet index = before.index!\r\n\t\t\t\tlet word = before[0] + value.slice(start).match(RegExp(\"^\" + group + \"*\", \"u\"))![0]\r\n\t\t\t\tsearchAPI.search(\r\n\t\t\t\t\t/^-*(\\d|$)/.test(word) || (filter && !filter(index, index + word.length)) ? \"\" : word,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\tundefined,\r\n\t\t\t\t\tfilter,\r\n\t\t\t\t\tRegExp(group + \"{2}\", \"u\"),\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tnoHighlight = false\r\n\t\t})\r\n\t}\r\n\tself.setFilter = newFilter => (filter = newFilter)\r\n\treturn self\r\n}\r\n\r\nexport { highlightSelectionMatches, highlightCurrentWord }\r\n"],"names":[],"mappings":";AA2BA,MAAM,4BAA4B,CAAC,eAAyB,YAAY,GAAG,YAAY,QAAQ;AAC9F,QAAM,OAAkC,CAAU,WAAA;AACjD,UAAM,YAAa,KAAK,MAAM,gBAAgB,MAAM;AACpD,UAAM,YAAY,UAAU;AAE5B,cAAU,MAAM,SAAc;AAC9B,cAAU,YAAY;AAEtB,WAAO,YAAY,mBAAmB,CAAC,CAAC,OAAO,GAAG,GAAG,UAAU;AAC9D,cAAQ,OAAO,UAAU,MAAM,MAAM,OAAO,GAAG,IAAI;AAC1C,eAAA,MAAM,OAAO,IAAI;AAC1B,cAAQ,MAAM;AACd,UAAI,IAAI,MAAM;AAEJ,gBAAA;AAAA,QACT,YAAY,KAAK,IAAI,YAAY,KAAK;AAAA,QACtC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,CAAC,QAAQ,SAAS,SAAS,SAAS,QAAQ;AAAA,MAAA;AAAA,IAC7C,CACA;AAAA,EAAA;AAEK,SAAA;AACR;AAyBM,MAAA,uBAAuB,CAC5B,QACA,mBACI;AACJ,QAAM,OAAwB,CAAU,WAAA;AACvC,QAAI,cAAc;AAClB,QAAI,YAAa,KAAK,MAAM,gBAAgB,MAAM;AAClD,QAAI,YAAY,UAAU;AAE1B,cAAU,MAAM,SAAc;AAC9B,cAAU,YAAY;AAEtB,WAAO,YAAY,UAAU,MAAO,cAAc,IAAK;AACvD,WAAO,YAAY,mBAAmB,CAAC,CAAC,OAAO,GAAG,GAAG,UAAU;AAC9D,UAAI,QAAQ,OAAO,CAAC,OAAO,WAAW;AAAa,kBAAU,OAAO,EAAE;AAAA,WACjE;AACJ,YAAI,QAAQ,eAAe,kBAAkB,eAAe,KAAK,IAAI,MAAM,EAAE;AACzE,YAAA,SAAS,MAAM,MAAM,GAAG,KAAK,EAAE,MAAM,OAAO,QAAQ,MAAM,GAAG,CAAC;AAClE,YAAI,QAAQ,OAAO;AACnB,YAAI,OAAO,OAAO,CAAC,IAAI,MAAM,MAAM,KAAK,EAAE,MAAM,OAAO,MAAM,QAAQ,KAAK,GAAG,CAAC,EAAG,CAAC;AACxE,kBAAA;AAAA,UACT,YAAY,KAAK,IAAI,KAAM,UAAU,CAAC,OAAO,OAAO,QAAQ,KAAK,MAAM,IAAK,KAAK;AAAA,UACjF;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,OAAO,QAAQ,OAAO,GAAG;AAAA,QAAA;AAAA,MAE3B;AACc,oBAAA;AAAA,IAAA,CACd;AAAA,EAAA;AAEG,OAAA,YAAY,eAAc,SAAS;AACjC,SAAA;AACR;"}